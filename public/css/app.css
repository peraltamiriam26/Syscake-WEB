/*! tailwindcss v4.1.5 | MIT License | https://tailwindcss.com */
@layer properties;
@layer theme, base, components, utilities;
@layer theme {
  :root, :host {
    --font-sans: ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji",
      "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
    --font-mono: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono",
      "Courier New", monospace;
    --color-red-500: oklch(63.7% 0.237 25.331);
    --color-red-700: oklch(50.5% 0.213 27.518);
    --color-yellow-500: oklch(79.5% 0.184 86.047);
    --color-yellow-700: oklch(55.4% 0.135 66.442);
    --color-green-500: oklch(72.3% 0.219 149.579);
    --color-green-700: oklch(52.7% 0.154 150.069);
    --color-blue-50: oklch(97% 0.014 254.604);
    --color-blue-100: oklch(93.2% 0.032 255.585);
    --color-blue-300: oklch(80.9% 0.105 251.813);
    --color-blue-500: oklch(62.3% 0.214 259.815);
    --color-blue-700: oklch(48.8% 0.243 264.376);
    --color-violet-200: oklch(89.4% 0.057 293.283);
    --color-purple-500: oklch(62.7% 0.265 303.9);
    --color-gray-50: oklch(98.5% 0.002 247.839);
    --color-gray-100: oklch(96.7% 0.003 264.542);
    --color-gray-200: oklch(92.8% 0.006 264.531);
    --color-gray-300: oklch(87.2% 0.01 258.338);
    --color-gray-400: oklch(70.7% 0.022 261.325);
    --color-gray-500: oklch(55.1% 0.027 264.364);
    --color-gray-600: oklch(44.6% 0.03 256.802);
    --color-gray-700: oklch(37.3% 0.034 259.733);
    --color-gray-800: oklch(27.8% 0.033 256.848);
    --color-gray-900: oklch(21% 0.034 264.665);
    --color-black: #000;
    --color-white: #fff;
    --spacing: 0.25rem;
    --breakpoint-lg: 64rem;
    --container-sm: 24rem;
    --container-md: 28rem;
    --text-xs: 0.75rem;
    --text-xs--line-height: calc(1 / 0.75);
    --text-sm: 0.875rem;
    --text-sm--line-height: calc(1.25 / 0.875);
    --text-base: 1rem;
    --text-base--line-height: calc(1.5 / 1);
    --text-lg: 1.125rem;
    --text-lg--line-height: calc(1.75 / 1.125);
    --text-xl: 1.25rem;
    --text-xl--line-height: calc(1.75 / 1.25);
    --text-2xl: 1.5rem;
    --text-2xl--line-height: calc(2 / 1.5);
    --text-3xl: 1.875rem;
    --text-3xl--line-height: calc(2.25 / 1.875);
    --font-weight-normal: 400;
    --font-weight-medium: 500;
    --font-weight-semibold: 600;
    --font-weight-bold: 700;
    --tracking-wider: 0.05em;
    --leading-tight: 1.25;
    --leading-normal: 1.5;
    --radius-md: 0.375rem;
    --radius-lg: 0.5rem;
    --radius-2xl: 1rem;
    --ease-out: cubic-bezier(0, 0, 0.2, 1);
    --ease-in-out: cubic-bezier(0.4, 0, 0.2, 1);
    --default-transition-duration: 150ms;
    --default-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    --default-font-family: var(--font-sans);
    --default-mono-font-family: var(--font-mono);
  }
}
@layer base {
  *, ::after, ::before, ::backdrop, ::file-selector-button {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
    border: 0 solid;
  }
  html, :host {
    line-height: 1.5;
    -webkit-text-size-adjust: 100%;
    -moz-tab-size: 4;
      -o-tab-size: 4;
         tab-size: 4;
    font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
    font-feature-settings: var(--default-font-feature-settings, normal);
    font-variation-settings: var(--default-font-variation-settings, normal);
    -webkit-tap-highlight-color: transparent;
  }
  hr {
    height: 0;
    color: inherit;
    border-top-width: 1px;
  }
  abbr:where([title]) {
    -webkit-text-decoration: underline dotted;
    text-decoration: underline dotted;
  }
  h1, h2, h3, h4, h5, h6 {
    font-size: inherit;
    font-weight: inherit;
  }
  a {
    color: inherit;
    -webkit-text-decoration: inherit;
    text-decoration: inherit;
  }
  b, strong {
    font-weight: bolder;
  }
  code, kbd, samp, pre {
    font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
    font-feature-settings: var(--default-mono-font-feature-settings, normal);
    font-variation-settings: var(--default-mono-font-variation-settings, normal);
    font-size: 1em;
  }
  small {
    font-size: 80%;
  }
  sub, sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;
  }
  sub {
    bottom: -0.25em;
  }
  sup {
    top: -0.5em;
  }
  table {
    text-indent: 0;
    border-color: inherit;
    border-collapse: collapse;
  }
  :-moz-focusring {
    outline: auto;
  }
  progress {
    vertical-align: baseline;
  }
  summary {
    display: list-item;
  }
  ol, ul, menu {
    list-style: none;
  }
  img, svg, video, canvas, audio, iframe, embed, object {
    display: block;
    vertical-align: middle;
  }
  img, video {
    max-width: 100%;
    height: auto;
  }
  button, input, select, optgroup, textarea, ::file-selector-button {
    font: inherit;
    font-feature-settings: inherit;
    font-variation-settings: inherit;
    letter-spacing: inherit;
    color: inherit;
    border-radius: 0;
    background-color: transparent;
    opacity: 1;
  }
  :where(select:is([multiple], [size])) optgroup {
    font-weight: bolder;
  }
  :where(select:is([multiple], [size])) optgroup option {
    padding-inline-start: 20px;
  }
  ::file-selector-button {
    margin-inline-end: 4px;
  }
  ::-moz-placeholder {
    opacity: 1;
  }
  ::placeholder {
    opacity: 1;
  }
  @supports (not (-webkit-appearance: -apple-pay-button))  or (contain-intrinsic-size: 1px) {
    ::-moz-placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
    ::placeholder {
      color: currentcolor;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, currentcolor 50%, transparent);
      }
    }
  }
  textarea {
    resize: vertical;
  }
  ::-webkit-search-decoration {
    -webkit-appearance: none;
  }
  ::-webkit-date-and-time-value {
    min-height: 1lh;
    text-align: inherit;
  }
  ::-webkit-datetime-edit {
    display: inline-flex;
  }
  ::-webkit-datetime-edit-fields-wrapper {
    padding: 0;
  }
  ::-webkit-datetime-edit, ::-webkit-datetime-edit-year-field, ::-webkit-datetime-edit-month-field, ::-webkit-datetime-edit-day-field, ::-webkit-datetime-edit-hour-field, ::-webkit-datetime-edit-minute-field, ::-webkit-datetime-edit-second-field, ::-webkit-datetime-edit-millisecond-field, ::-webkit-datetime-edit-meridiem-field {
    padding-block: 0;
  }
  :-moz-ui-invalid {
    box-shadow: none;
  }
  button, input:where([type="button"], [type="reset"], [type="submit"]), ::file-selector-button {
    -webkit-appearance: button;
       -moz-appearance: button;
            appearance: button;
  }
  ::-webkit-inner-spin-button, ::-webkit-outer-spin-button {
    height: auto;
  }
  [hidden]:where(:not([hidden="until-found"])) {
    display: none !important;
  }
}
@layer utilities {
  .diff {
    position: relative;
    display: grid;
    width: 100%;
    overflow: hidden;
    container-type: inline-size;
    grid-template-columns: auto 1fr;
  }
  .\@container {
    container-type: inline-size;
  }
  .modal {
    pointer-events: none;
    position: fixed;
    inset: calc(0.25rem * 0);
    z-index: 80;
    margin: calc(0.25rem * 0);
    display: grid;
    width: 100%;
    height: 100%;
    justify-items: center;
    padding: calc(0.25rem * 4);
    opacity: 0%;
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 500ms;
    --tw-duration: 500ms;
  }
  .carousel-prev {
    position: absolute;
    inset-block: calc(0.25rem * 0);
    display: inline-flex;
    height: 100%;
    width: 10%;
    align-items: center;
    justify-content: center;
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
    &:hover {
      @media (hover: hover) {
        color: var(--color-base-content);
      }
    }
    @media (width < 40rem) {
      width: 18%;
    }
    &.disabled {
      pointer-events: none;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 30%, transparent);
      }
    }
    inset-inline-start: calc(0.25rem * 0);
    border-start-start-radius: var(--radius-2xl);
    border-end-start-radius: var(--radius-2xl);
  }
  .carousel-next {
    position: absolute;
    inset-block: calc(0.25rem * 0);
    display: inline-flex;
    height: 100%;
    width: 10%;
    align-items: center;
    justify-content: center;
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
    &:hover {
      @media (hover: hover) {
        color: var(--color-base-content);
      }
    }
    @media (width < 40rem) {
      width: 18%;
    }
    &.disabled {
      pointer-events: none;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 30%, transparent);
      }
    }
    inset-inline-end: calc(0.25rem * 0);
    border-start-end-radius: var(--radius-2xl);
    border-end-end-radius: var(--radius-2xl);
  }
  .menu {
    display: flex;
    flex-direction: column;
    flex-wrap: wrap;
    gap: calc(0.25rem * 0.5);
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    padding: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --menu-active-fg: var(--color-primary);
    --menu-active-bg: var(--color-primary);
    @supports (color: color-mix(in lab, red, red)) {
      --menu-active-bg: color-mix(in oklab, var(--color-primary) 10%, #0000);
    }
    :where(li ul) {
      position: relative;
      white-space: nowrap;
    }
    :where(li:not(.dropdown) ul) {
      margin-inline-start: calc(0.25rem * 4);
      padding-inline-start: calc(0.25rem * 2);
      &:before {
        position: absolute;
        inset-inline-start: calc(0.25rem * 0);
        top: calc(0.25rem * 3);
        bottom: calc(0.25rem * 2.5);
        background-color: var(--color-base-content);
        opacity: 10%;
        width: var(--border);
        content: "";
      }
    }
    :where(li > .menu-dropdown:not(.menu-dropdown-show)) {
      display: none;
    }
    :where(.menu li:empty) {
      background-color: var(--color-base-content);
      opacity: 10%;
      margin: 0.5rem 1rem;
      height: 1px;
    }
    :where(li:not(.menu-title, .tooltip) > *:not(ul, .collapse, .menu-title, .btn)) {
      border-radius: var(--radius-field);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 2.5);
      text-align: start;
      transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
      transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
      transition-timing-function: var(--ease-out);
      transition-duration: var(--tw-duration, var(--default-transition-duration));
      transition-duration: 200ms;
      --tw-duration: 200ms;
      --tw-ease: var(--ease-out);
      text-wrap: balance;
    }
    :where(li:not(.menu-title) > *:not(ul, .collapse, .menu-title, .btn)) {
      display: grid;
      grid-auto-flow: column;
      align-content: flex-start;
      align-items: center;
      gap: calc(0.25rem * 2);
      grid-auto-columns: minmax(auto, max-content) auto max-content;
      -webkit-user-select: none;
         -moz-user-select: none;
              user-select: none;
    }
    li.tooltip > * {
      border-radius: var(--radius-field);
      padding-inline: calc(0.25rem * 4);
      padding-block: calc(0.25rem * 2.5);
      text-align: start;
    }
    :where(.menu li:not(.menu-title, .menu-disabled)) {
      color: var(--color-base-content);
    }
    :where(.menu li:not(.menu-title, .menu-disabled) > *:not(ul, .collapse, .menu-title)) {
      &:not(.btn).menu-focus, &:not(.btn):focus-visible {
        cursor: pointer;
        background-color: var(--color-neutral);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
        }
        color: var(--color-base-content);
        --tw-outline-style: none;
        outline-style: none;
      }
      &:hover {
        cursor: pointer;
        background-color: var(--color-neutral);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
        }
        color: var(--color-base-content);
        --tw-outline-style: none;
        outline-style: none;
      }
    }
    li:not(.menu-title, .menu-disabled) > :not(ul, .menu-title, .collapse, .btn):active, li:not(.menu-title, .menu-disabled) > :not(ul, .menu-title, .collapse, .btn).menu-active {
      color: var(--menu-active-fg);
      background-color: var(--menu-active-bg);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }
    li.menu-disabled {
      pointer-events: none;
      opacity: 50%;
      webkit-user-select: none;
      -webkit-user-select: none;
         -moz-user-select: none;
              user-select: none;
    }
    :where(& li) {
      position: relative;
      display: flex;
      flex-shrink: 0;
      flex-direction: column;
      flex-wrap: wrap;
      align-items: stretch;
      .badge {
        justify-self: flex-end;
      }
    }
  }
  .link {
    --link-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --link-color: color-mix(in oklab, var(--color-base-content) 80%, #0000);
    }
    display: inline-block;
    cursor: pointer;
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    text-decoration-line: underline;
    color: var(--link-color);
    &:hover {
      color: var(--link-color);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--link-color) 80%, #000);
      }
    }
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
    }
    &:focus-visible {
      outline: 2px solid currentColor;
      outline-offset: 2px;
    }
    &.disabled, &[disabled], &:disabled {
      pointer-events: none;
      opacity: 50%;
    }
    &.link-hover {
      text-decoration-line: none;
      @media (hover:hover) {
        &:hover {
          @media (hover: hover) {
            text-decoration-line: underline;
          }
        }
      }
    }
    &.link-animated {
      position: relative;
      text-decoration-line: none;
      &::before {
        content: var(--tw-content);
        content: var(--tw-content);
        pointer-events: none;
        position: absolute;
        inset-inline-start: calc(0.25rem * 0);
        bottom: calc(0.25rem * 0);
        height: 1px;
        width: 100%;
        background-color: currentColor;
        transition-property: transform, translate, scale, rotate;
        transition-timing-function: var(--ease-in-out);
        transition-duration: 300ms;
        --tw-duration: 300ms;
        --tw-ease: var(--ease-in-out);
        --tw-content: '';
      }
    }
    &.link-animated::before {
      transform-origin: 100% 50%;
      transform: scale3d(0, 1, 1);
    }
    &.link-animated:hover::before {
      transform-origin: 0% 50%;
      transform: scale3d(1, 1, 1);
    }
  }
  .link\! {
    --link-color: var(--color-base-content) !important;
    @supports (color: color-mix(in lab, red, red)) {
      --link-color: color-mix(in oklab, var(--color-base-content) 80%, #0000) !important;
    }
    display: inline-block !important;
    cursor: pointer !important;
    --tw-font-weight: var(--font-weight-medium) !important;
    font-weight: var(--font-weight-medium) !important;
    text-decoration-line: underline !important;
    color: var(--link-color) !important;
    &:hover {
      color: var(--link-color) !important;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--link-color) 80%, #000) !important;
      }
    }
    &:focus {
      --tw-outline-style: none !important;
      outline-style: none !important;
    }
    &:focus-visible {
      outline: 2px solid currentColor !important;
      outline-offset: 2px !important;
    }
    &.disabled, &[disabled], &:disabled {
      pointer-events: none !important;
      opacity: 50% !important;
    }
    &.link-hover {
      text-decoration-line: none !important;
      @media (hover:hover) {
        &:hover {
          @media (hover: hover) {
            text-decoration-line: underline !important;
          }
        }
      }
    }
    &.link-animated {
      position: relative !important;
      text-decoration-line: none !important;
      &::before {
        content: var(--tw-content) !important;
        content: var(--tw-content) !important;
        pointer-events: none !important;
        position: absolute !important;
        inset-inline-start: calc(0.25rem * 0) !important;
        bottom: calc(0.25rem * 0) !important;
        height: 1px !important;
        width: 100% !important;
        background-color: currentColor !important;
        transition-property: transform, translate, scale, rotate !important;
        transition-timing-function: var(--ease-in-out) !important;
        transition-duration: 300ms !important;
        --tw-duration: 300ms !important;
        --tw-ease: var(--ease-in-out) !important;
        --tw-content: '' !important;
      }
    }
    &.link-animated::before {
      transform-origin: 100% 50% !important;
      transform: scale3d(0, 1, 1) !important;
    }
    &.link-animated:hover::before {
      transform-origin: 0% 50% !important;
      transform: scale3d(1, 1, 1) !important;
    }
  }
  .range {
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    webkit-appearance: none;
    --range-color: var(--color-base-content);
    --range-thumb-border-width: 3px;
    --range-track-height: 8px;
    --range-thumb-size: 16px;
    position: relative;
    width: 100%;
    border-radius: calc(infinity * 1px);
    background-color: transparent;
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    height: var(--range-track-height);
    &::-webkit-slider-runnable-track {
      width: 100%;
      border-radius: calc(infinity * 1px);
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
      height: var(--range-track-height);
    }
    &::-moz-range-track {
      width: 100%;
      border-radius: calc(infinity * 1px);
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
      height: var(--range-track-height);
    }
    &::-webkit-slider-thumb {
      position: relative;
      top: calc(1/2 * 100%);
      --tw-translate-y: calc(calc(1/2 * 100%) * -1);
      translate: var(--tw-translate-x) var(--tw-translate-y);
      border-radius: calc(infinity * 1px);
      background-color: var(--color-base-100);
      --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --tw-shadow-color: var(--color-base-300);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
      }
      -webkit-transition-property: all;
      transition-property: all;
      transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
      transition-timing-function: var(--ease-in-out);
      transition-duration: var(--tw-duration, var(--default-transition-duration));
      transition-duration: 150ms;
      --tw-duration: 150ms;
      --tw-ease: var(--ease-in-out);
      &:hover {
        @media (hover: hover) {
          --tw-scale-x: 125%;
          --tw-scale-y: 125%;
          --tw-scale-z: 125%;
          scale: var(--tw-scale-x) var(--tw-scale-y);
        }
        cursor: grab;
        box-shadow: 0 0 0 2px var(--range-color);
      }
      &:active {
        --tw-scale-x: 125%;
        --tw-scale-y: 125%;
        --tw-scale-z: 125%;
        scale: var(--tw-scale-x) var(--tw-scale-y);
        cursor: grabbing;
        box-shadow: 0 0 0 3px var(--range-color);
      }
      -webkit-appearance: none;
              appearance: none;
      box-sizing: border-box;
      webkit-appearance: none;
      color: var(--range-color);
      border-color: var(--range-color);
      border-style: solid;
      border-width: var(--range-thumb-border-width);
      height: var(--range-thumb-size);
      width: var(--range-thumb-size);
    }
    &::-moz-range-thumb {
      position: relative;
      border-radius: calc(infinity * 1px);
      background-color: var(--color-base-100);
      --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      -moz-transition-property: all;
      transition-property: all;
      transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
      transition-timing-function: var(--ease-in-out);
      transition-duration: var(--tw-duration, var(--default-transition-duration));
      transition-duration: 150ms;
      --tw-duration: 150ms;
      --tw-ease: var(--ease-in-out);
      top: 50%;
      color: var(--range-color);
      box-sizing: border-box;
      border-color: var(--range-color);
      border-style: solid;
      border-width: var(--range-thumb-border-width);
      height: var(--range-thumb-size);
      width: var(--range-thumb-size);
      &:hover {
        cursor: grab;
        box-shadow: 0 0 0 2px var(--range-color);
      }
      &:active {
        cursor: grabbing;
        box-shadow: 0 0 0 3px var(--range-color);
      }
    }
    &:focus {
      outline: none;
    }
    &.disabled {
      pointer-events: none;
      opacity: 30%;
    }
    &:disabled {
      pointer-events: none;
      opacity: 30%;
    }
    &[disabled] {
      pointer-events: none;
      opacity: 30%;
    }
    [dir="rtl"] &::-webkit-slider-thumb {
      transform: scaleX(-1);
    }
    [dir="rtl"] &::-moz-range-thumb {
      transform: scaleX(-1);
    }
    [dir="rtl"] &::-webkit-slider-runnable-track {
      direction: rtl;
    }
    [dir="rtl"] &::-moz-range-track {
      direction: rtl;
    }
  }
  .tab {
    .tabs-lifted > &:focus-visible {
      border-end-end-radius: 0;
      border-end-start-radius: 0;
    }
    position: relative;
    display: inline-flex;
    cursor: pointer;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    webkit-user-select: none;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    height: var(--size);
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    --tab-p: 1rem;
    --tab-bg: var(--color-base-100);
    --tab-border-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --tab-border-color: color-mix(in oklab, var(--color-base-content), #0000 90%);
    }
    padding-inline: var(--tab-p, 1rem);
    &:focus, &:focus-visible {
      --tw-outline-style: none;
      outline-style: none;
    }
    &[disabled] {
      pointer-events: none;
      opacity: 40%;
    }
    @media (hover: hover) {
      &[disabled]:hover {
        pointer-events: none;
        opacity: 40%;
      }
    }
    .tabs-bordered > & {
      border-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
      @media (hover:hover) {
        &:hover {
          @media (hover: hover) {
            border-color: var(--color-primary);
            @supports (color: color-mix(in lab, red, red)) {
              border-color: color-mix(in oklab, var(--color-primary) 30%, transparent);
            }
          }
        }
      }
      @media (hover:hover) {
        &:hover {
          @media (hover: hover) {
            color: var(--color-primary);
          }
        }
      }
      border-style: solid;
      border-bottom-width: calc(var(--border, 1px) + 1px);
    }
    .tabs-lifted > & {
      @media (hover:hover) {
        &:hover {
          @media (hover: hover) {
            border-color: var(--color-primary);
            @supports (color: color-mix(in lab, red, red)) {
              border-color: color-mix(in oklab, var(--color-primary) 30%, transparent);
            }
          }
        }
      }
      @media (hover:hover) {
        &:hover {
          @media (hover: hover) {
            color: var(--color-primary);
          }
        }
      }
      border: var(--tab-border, 1px) solid transparent;
      border-width: 0 0 var(--tab-border, 1px) 0;
      border-radius: var(--radius-field, 0.375rem);
      border-bottom-color: var(--tab-border-color);
      padding-inline-start: var(--tab-p, 1rem);
      padding-inline-end: var(--tab-p, 1rem);
      padding-top: var(--tab-border, 1px);
    }
    .tabs-lifted > &.tab-active:not([disabled]) {
      background-color: var(--tab-bg);
      border-width: var(--tab-border, 1px) var(--tab-border, 1px) 0 var(--tab-border, 1px);
      border-color: var(--tab-border-color);
      border-end-start-radius: 0;
      border-end-end-radius: 0;
      padding-inline-start: calc(var(--tab-p, 1rem) - var(--tab-border, 1px));
      padding-inline-end: calc(var(--tab-p, 1rem) - var(--tab-border, 1px));
      padding-bottom: var(--tab-border, 1px);
      padding-top: 0;
    }
    .tabs-lifted > &.tab-active:not([disabled]):before {
      content: "";
      display: block;
      position: absolute;
      z-index: 1;
      width: calc(100% + var(--radius-field, 0.375rem) * 2);
      height: var(--radius-field, 0.375rem);
      bottom: 0;
      background-size: var(--radius-field, 0.375rem);
      background-repeat: no-repeat;
      background-position: top left, top right;
      --tab-grad: calc(69% - var(--tab-border, 1px));
      --radius-start: radial-gradient(
    circle at top left,
    transparent var(--tab-grad),
    var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
    var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),
    var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.25px)
  );
      --radius-end: radial-gradient(
    circle at top right,
    transparent var(--tab-grad),
    var(--tab-border-color) calc(var(--tab-grad) + 0.25px),
    var(--tab-border-color) calc(var(--tab-grad) + var(--tab-border, 1px)),
    var(--tab-bg) calc(var(--tab-grad) + var(--tab-border, 1px) + 0.25px)
  );
      background-image: var(--radius-start), var(--radius-end);
    }
    .tabs-lifted > &.tab-active:not([disabled]):first-child:before {
      background-image: var(--radius-end);
      background-position: top right;
    }
    .tabs-lifted > &.tab-active:not([disabled]):last-child:before {
      background-image: var(--radius-start);
      background-position: top left;
    }
    [dir="rtl"] .tabs-lifted > &.tab-active:not([disabled]):first-child:before {
      background-image: var(--radius-start);
      background-position: top left;
    }
    [dir="rtl"] .tabs-lifted > &.tab-active:not([disabled]):last-child:before {
      background-image: var(--radius-end);
      background-position: top right;
    }
    .tabs-xl :where(&) {
      font-size: var(--text-xl);
      line-height: var(--tw-leading, var(--text-xl--line-height));
      --size: calc(var(--size-field, 0.25rem) * 14);
      --tab-p: 1.5rem;
    }
    .tabs-lg :where(&) {
      font-size: var(--text-lg);
      line-height: var(--tw-leading, var(--text-lg--line-height));
      --size: calc(var(--size-field, 0.25rem) * 11.5);
      --tab-p: 1.25rem;
    }
    .tabs-md :where(&) {
      font-size: var(--text-base);
      line-height: var(--tw-leading, var(--text-base--line-height));
      --size: calc(var(--size-field, 0.25rem) * 9.5);
      --tab-p: 1rem;
    }
    .tabs-sm :where(&) {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
      --size: calc(var(--size-field, 0.25rem) * 7.5);
      --tab-p: 0.75rem;
    }
    .tabs-xs :where(&) {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
      --size: calc(var(--size-field, 0.25rem) * 6);
      --tab-p: 0.5rem;
    }
  }
  .btn {
    display: inline-flex;
    flex-shrink: 0;
    cursor: pointer;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: center;
    gap: calc(0.25rem * 2);
    text-align: center;
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    text-decoration-line: none;
    webkit-user-select: none;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    @media (prefers-reduced-motion: reduce) {
      transition-property: none;
    }
    padding-inline: var(--btn-p);
    color: var(--btn-fg);
    height: var(--size);
    outline-color: var(--btn-color, var(--color-neutral));
    @supports (color: color-mix(in lab, red, red)) {
      outline-color: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 30%, var(--color-base-100));
    }
    transition-property: color, background-color, border-color, box-shadow;
    transition-timing-function: cubic-bezier(0, 0, 0.96, 1.03);
    transition-duration: 0.25s;
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-color: var(--btn-bg);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--btn-noise);
    border: var(--border) solid var(--btn-border);
    box-shadow: 0 0.5px 0 0.5px oklch(100% 0 0 / calc(var(--depth) * 8%)) inset, var(--btn-shadow);
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    --btn-bg: var(--btn-color, var(--color-neutral));
    --btn-fg: var(--color-neutral-content);
    --btn-p: 1rem;
    --btn-border: var(--btn-bg);
    @supports (color: color-mix(in lab, red, red)) {
      --btn-border: color-mix(in oklab, var(--btn-bg), #000 calc(var(--depth) * 5%));
    }
    --btn-shadow: 0px 1px 3px 0px var(--color-base-300),
    0px 1px 2px -1px var(--color-base-300);
    @supports (color: color-mix(in lab, red, red)) {
      --btn-shadow: 0px 1px 3px 0px color-mix(in oklab, var(--color-base-300) 40%, #0000),
    0px 1px 2px -1px color-mix(in oklab, var(--color-base-300) 40%, #0000);
    }
    --btn-noise: var(--fx-noise);
    @media (hover: hover) {
      &:hover {
        --btn-bg: var(--btn-color, var(--color-neutral));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 90%, #000);
        }
      }
    }
    &:active:hover:not(.btn-active), &:active:focus:not(.btn-active) {
      --tw-scale-x: 95%;
      --tw-scale-y: 95%;
      --tw-scale-z: 95%;
      scale: var(--tw-scale-x) var(--tw-scale-y);
      transition-property: transform, translate, scale, rotate;
      transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
      transition-timing-function: ease-out;
      transition-duration: var(--tw-duration, var(--default-transition-duration));
      transition-duration: 300ms;
      --tw-duration: 300ms;
    }
    &:focus-visible {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)), #000 10%);
      }
      outline-width: 2px;
      outline-style: solid;
    }
    &:is(:disabled, [disabled], .btn-disabled) {
      pointer-events: none;
      opacity: 50%;
      --tw-shadow: 0 0 #0000;
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
    &:is(input[type="checkbox"], input[type="radio"]) {
      -webkit-appearance: none;
         -moz-appearance: none;
              appearance: none;
      &::after {
        content: attr(aria-label);
      }
      &:checked {
        background: var(--color-primary);
        color: var(--color-primary-content);
        outline-color: var(--color-primary);
        --btn-shadow: 0 0 0 0 oklch(0% 0 0/0), 0 0 0 0 oklch(0% 0 0/0);
        isolation: isolate;
      }
    }
  }
  .pin-input {
    border-radius: var(--radius-field);
    border-style: var(--tw-border-style);
    border-width: 1px;
    border-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
    background-color: var(--color-base-100);
    text-align: center;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    &::-moz-placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
      }
    }
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
      }
    }
    height: var(--size);
    width: var(--size);
    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    &:hover:not(:focus, :focus-within) {
      border-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }
    }
    &:focus, &:focus-within {
      border-color: var(--color-primary);
      --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --tw-shadow-color: var(--color-primary);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, var(--color-primary) 30%, #0000);
      }
      outline: 1px solid var(--color-primary);
      isolation: isolate;
    }
    &.pin-input-underline {
      border-radius: 0;
      border-style: var(--tw-border-style);
      border-width: 0px;
      border-bottom-style: var(--tw-border-style);
      border-bottom-width: 1px;
      border-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }
      background-color: transparent;
      &:focus, &:focus-within {
        border-bottom-style: var(--tw-border-style);
        border-bottom-width: 2px;
        border-color: var(--color-primary);
        --tw-shadow: 0 0 #0000;
        box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
        --tw-outline-style: none;
        outline-style: none;
      }
    }
    &.disabled, &:disabled, &[disabled] {
      pointer-events: none;
      border-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
      }
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 5%, transparent);
      }
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
      &::-moz-placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
      }
      &::placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
        }
      }
    }
  }
  .dropdown-item {
    clear: both;
    display: flex;
    width: 100%;
    align-items: center;
    -moz-column-gap: calc(0.25rem * 2);
         column-gap: calc(0.25rem * 2);
    border-radius: var(--radius-field);
    background-color: transparent;
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    color: var(--color-base-content);
    text-decoration-line: none;
    text-decoration-thickness: 0px;
    text-align: inherit;
    &:hover, &:focus, &:focus-within, &:focus-visible {
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
      --tw-outline-style: none;
      outline-style: none;
    }
    &.dropdown-disabled, &:disabled, &[disabled] {
      pointer-events: none;
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 5%, transparent);
      }
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }
    &:active {
      background-color: var(--color-primary);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
      }
      color: var(--color-primary);
    }
  }
  .loading {
    pointer-events: none;
    display: inline-block;
    aspect-ratio: 1 / 1;
    background-color: currentColor;
    vertical-align: middle;
    width: calc(var(--size-selector, 0.25rem) * 6);
    -webkit-mask-size: 100%;
            mask-size: 100%;
    -webkit-mask-repeat: no-repeat;
            mask-repeat: no-repeat;
    -webkit-mask-position: center;
            mask-position: center;
    -webkit-mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
            mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
  }
  .modal-content {
    pointer-events: auto;
    display: flex;
    transform: var(--tw-rotate-x) var(--tw-rotate-y) var(--tw-rotate-z) var(--tw-skew-x) var(--tw-skew-y);
    flex-direction: column;
    border-radius: var(--radius-lg);
    background-color: var(--color-base-100);
    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 8px 10px -6px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: var(--ease-out);
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 300ms;
    --tw-duration: 300ms;
    --tw-ease: var(--ease-out);
    max-height: calc(100vh - 2rem);
    overscroll-behavior: contain;
  }
  .accordion-toggle {
    width: 100%;
    cursor: pointer;
    padding-inline: calc(0.25rem * 5);
    padding-block: calc(0.25rem * 4);
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    color: var(--color-base-content);
    &:disabled {
      pointer-events: none;
      opacity: 50%;
    }
  }
  .\!disabled {
    .carousel-prev& {
      pointer-events: none !important;
      color: var(--color-base-content) !important;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 30%, transparent) !important;
      }
    }
    .carousel-next& {
      pointer-events: none !important;
      color: var(--color-base-content) !important;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 30%, transparent) !important;
      }
    }
  }
  .disabled {
    .carousel-prev& {
      pointer-events: none;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 30%, transparent);
      }
    }
    .carousel-next& {
      pointer-events: none;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 30%, transparent);
      }
    }
  }
  .\!disabled {
    .range& {
      pointer-events: none !important;
      opacity: 30% !important;
    }
  }
  .disabled {
    .range& {
      pointer-events: none;
      opacity: 30%;
    }
  }
  .tooltip-content {
    visibility: hidden;
    position: absolute;
    display: inline-block;
    padding: calc(0.25rem * 2);
    opacity: 0%;
    transition-property: opacity;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    width: -moz-max-content;
    width: max-content;
    z-index: 20;
  }
  .collapse {
    visibility: collapse;
  }
  .collapse {
    &:not(td):not(tr):not(colgroup) {
      visibility: visible;
    }
  }
  .invisible {
    visibility: hidden;
  }
  .visible {
    visibility: visible;
  }
  .indicator {
    position: relative;
    display: inline-flex;
    width: -moz-max-content;
    width: max-content;
    :where(.indicator-item) {
      z-index: 1;
      position: absolute;
      white-space: nowrap;
      top: var(--inidicator-t, 0);
      bottom: var(--inidicator-b, auto);
      inset-inline-start: var(--inidicator-s, auto);
      inset-inline-end: var(--inidicator-e, 0);
      translate: var(--inidicator-x, 50%) var(--indicator-y, -50%);
      [dir="rtl"] & {
        --inidicator-x: -50%;
      }
    }
  }
  .switch {
    border: var(--border) solid #0000;
    color: var(--color-base-100);
    position: relative;
    display: inline-grid;
    flex-shrink: 0;
    cursor: pointer;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    place-content: center;
    border-radius: calc(infinity * 1px);
    vertical-align: middle;
    webkit-user-select: none;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    @media print {
      outline: .25rem solid;
    }
    grid-template-columns: 0fr 1fr 1fr;
    padding: var(--toggle-p);
    box-shadow: 0 1px currentColor inset;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 1px color-mix(in oklab, currentColor calc(var(--depth) * 10%), #0000) inset;
    }
    background-color: var(--input-color);
    transition: color 0.3s, grid-template-columns 0.2s;
    --input-color: var(--color-neutral);
    --toggle-p: 0.1875rem;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: calc((var(--size) * 2) - (var(--border) + var(--toggle-p)) * 2);
    height: var(--size);
    &:before {
      position: relative;
      inset-inline-start: calc(0.25rem * 0);
      grid-column-start: 2;
      grid-row-start: 1;
      aspect-ratio: 1 / 1;
      height: 100%;
      border-radius: calc(infinity * 1px);
      background-color: currentColor;
      @media print {
        outline: .25rem solid;
      }
      @media print {
        outline-offset: -1rem;
      }
      translate: 0;
      --tw-content: "";
      content: var(--tw-content);
      transition: background-color 0.1s, translate 0.2s, inset-inline-start 0.2s;
      box-shadow: 0 -1px oklch(59.99% 0 0 / calc(var(--depth) * 0.08)) inset, 0 8px 0 -4px oklch(59.99% 0 0 / calc(var(--depth) * 0.08)) inset, 0 1px 2px 0 oklch(0% 0 0 / 0.2);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
      @media (forced-colors: active) {
        outline-style: var(--tw-outline-style);
        outline-width: 1px;
        outline-offset: calc(1px * -1);
      }
    }
    &:focus-visible, &:has(:focus-visible) {
      outline: 2px solid var(--input-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
      }
      outline-offset: 0px;
    }
    &:checked, &[aria-checked="true"], &:has(> input:checked) {
      grid-template-columns: 1fr 1fr 0fr;
      background-color: var(--input-color);
      &:before {
        background-color: currentColor;
        @starting-style {
          opacity: 0;
        }
      }
    }
    &:indeterminate {
      grid-template-columns: 0.5fr 1fr 0.5fr;
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 40%;
      &:before {
        background-color: transparent;
      }
    }
  }
  .table {
    position: relative;
    width: 100%;
    overflow-x: hidden;
    overflow-y: auto;
    border-radius: var(--radius-box);
    text-align: left;
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
      text-align: right;
    }
    tr.row-hover {
      &, &:nth-child(even) {
        &:hover {
          @media (hover: hover) {
            background-color: var(--color-base-200);
            @supports (color: color-mix(in lab, red, red)) {
              background-color: color-mix(in oklab, var(--color-base-200) 80%, transparent);
            }
          }
        }
      }
    }
    tr.row-active {
      &, &:nth-child(even) {
        background-color: var(--color-base-200);
      }
    }
    :where(th, td) {
      padding-inline: calc(0.25rem * 5);
      padding-block: calc(0.25rem * 3);
      vertical-align: middle;
      text-wrap: nowrap;
    }
    :where(thead, tfoot) {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
      white-space: nowrap;
      color: var(--color-base-content);
      text-transform: uppercase;
      letter-spacing: 1px;
    }
    :where(th) {
      --tw-font-weight: var(--font-weight-medium);
      font-weight: var(--font-weight-medium);
    }
    :where(.table-pin-rows thead tr) {
      position: sticky;
      top: calc(0.25rem * 0);
      z-index: 1;
      background-color: var(--color-base-100);
    }
    :where(.table-pin-rows tfoot tr) {
      position: sticky;
      bottom: calc(0.25rem * 0);
      z-index: 1;
      background-color: var(--color-base-100);
    }
    :where(.table-pin-cols tr th) {
      position: sticky;
      right: calc(0.25rem * 0);
      left: calc(0.25rem * 0);
      background-color: var(--color-base-100);
    }
    :where(thead tr) {
      border-bottom: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 25%, #0000);
      }
    }
    :where(tbody tr:not(:last-child)) {
      border-bottom: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-bottom: var(--border) solid color-mix(in oklch, var(--color-base-content) 10%, #0000);
      }
    }
    :where(tfoot) {
      border-top: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-top: var(--border) solid color-mix(in oklch, var(--color-base-content) 25%, #0000);
      }
    }
  }
  .select {
    position: relative;
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: pointer;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    background-color: var(--color-base-100);
    padding-inline-start: calc(0.25rem * 3);
    padding-inline-end: calc(0.25rem * 10);
    vertical-align: middle;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    webkit-user-select: none;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    height: var(--size);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    background-image: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='1em' height='1em' viewBox='0 0 24 24'><path fill='none' stroke='%239293AE' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m6 9l6 6l6-6'/></svg>");
    background-size: 1.3em;
    background-position: calc(100% - 0.5rem) center;
    background-repeat: no-repeat;
    text-overflow: ellipsis;
    border: var(--border) solid #0000;
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    [dir="rtl"] & {
      background-position: calc(0% + 1.3em) center;
    }
    select {
      margin-inline-end: calc(0.25rem * -10);
      height: 100%;
      width: calc(100% + 2.75rem);
      -webkit-appearance: none;
         -moz-appearance: none;
              appearance: none;
      padding-inline-start: calc(0.25rem * 3);
      padding-inline-end: calc(0.25rem * 10);
      background-color: transparent;
      border-style: none;
      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;
      }
    }
    &[multiple] {
      background-image: none;
    }
    &:focus, &:focus-within {
      --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --input-color: var(--color-primary);
      --tw-shadow-color: var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
      }
      outline: 1px solid var(--input-color);
      border-color: var(--input-color);
      isolation: isolate;
    }
    &:has(> select[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-style: var(--tw-border-style);
      border-width: 0px;
      border-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
      &::-moz-placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
        }
      }
      &::placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
        }
      }
    }
    &:has(> select[disabled]) > select[disabled] {
      cursor: not-allowed;
    }
    .input > & {
      height: auto;
      border-style: var(--tw-border-style);
      border-width: 0px;
      &:focus, &:focus-within {
        --tw-shadow: 0 0 #0000;
        box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
        outline-style: var(--tw-outline-style);
        outline-width: 0px;
      }
    }
    &:has(> .select-floating) select {
      &::-moz-placeholder {
        color: transparent;
      }
      &::placeholder {
        color: transparent;
      }
      &:focus {
        &::-moz-placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
      }
    }
  }
  .card {
    position: relative;
    display: flex;
    flex-direction: column;
    border-radius: var(--radius-box);
    --tw-border-style: solid;
    border-style: solid;
    border-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
    background-color: var(--color-base-100);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
    --tw-outline-style: none;
    outline-style: none;
    box-shadow: var( --card-shadow, 0 1px 3px 0 var(--color-base-300), 0 1px 2px -1px var(--color-base-300) );
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: var( --card-shadow, 0 1px 3px 0 color-mix(in oklab, var(--color-base-300) 20%, #0000), 0 1px 2px -1px color-mix(in oklab, var(--color-base-300) 20%, #0000) );
    }
    border-width: var(--card-border, 0px);
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
      @media (forced-colors: active) {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }
    }
    :where(figure:first-child) {
      overflow: hidden;
      border-start-start-radius: inherit;
      border-start-end-radius: inherit;
      border-end-start-radius: unset;
      border-end-end-radius: unset;
    }
    :where(figure:last-child) {
      overflow: hidden;
      border-start-start-radius: unset;
      border-start-end-radius: unset;
      border-end-start-radius: inherit;
      border-end-end-radius: inherit;
    }
    &:where(.card-border) {
      border: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border: var(--border) solid color-mix(in oklab, var(--color-base-content) 20%, transparent);
      }
    }
    &.image-full {
      display: grid;
      &:before {
        position: relative;
        grid-column-start: 1;
        grid-row-start: 1;
        border-radius: var(--radius-box);
        background-color: var(--color-neutral);
        opacity: 75%;
        content: "";
      }
      > * {
        grid-column-start: 1;
        grid-row-start: 1;
      }
      > .card-body {
        position: relative;
        color: var(--color-neutral-content);
      }
      :where(figure) {
        overflow: hidden;
        border-radius: inherit;
      }
      > figure img {
        height: 100%;
        -o-object-fit: cover;
           object-fit: cover;
      }
    }
    figure {
      display: flex;
      align-items: center;
      justify-content: center;
    }
    &:has(> input:is(input[type="checkbox"], input[type="radio"])) {
      cursor: pointer;
      -webkit-user-select: none;
         -moz-user-select: none;
              user-select: none;
    }
    &:has(> :checked) {
      outline: 2px solid currentColor;
    }
    & .card-alert {
      border-radius: 0;
      &:first-child {
        border-top-left-radius: var(--radius-box);
        border-top-right-radius: var(--radius-box);
      }
      &:last-child {
        border-bottom-right-radius: var(--radius-box);
        border-bottom-left-radius: var(--radius-box);
      }
    }
  }
  .swap {
    position: relative;
    display: inline-grid;
    cursor: pointer;
    place-content: center;
    vertical-align: middle;
    webkit-user-select: none;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    input {
      -webkit-appearance: none;
         -moz-appearance: none;
              appearance: none;
      border: none;
    }
    > * {
      grid-column-start: 1;
      grid-row-start: 1;
      transition-property: transform, rotate, opacity;
      transition-duration: 0.2s;
      transition-timing-function: cubic-bezier(0, 0, 0.2, 1);
    }
    .swap-on, .swap-indeterminate, input:indeterminate ~ .swap-on {
      opacity: 0%;
    }
    input:is(:checked, :indeterminate) {
      & ~ .swap-off {
        opacity: 0%;
      }
    }
    input:checked ~ .swap-on, input:indeterminate ~ .swap-indeterminate {
      opacity: 100%;
    }
  }
  .checkbox {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    border-radius: var(--radius-selector);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    color: var(--color-neutral-content);
    border: var(--border) solid var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    --input-color: var(--color-neutral);
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 0 #0000 inset, 0 0 #0000;
    transition: background-color 0.2s, box-shadow 0.2s;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    &:before {
      --tw-content: "";
      content: var(--tw-content);
      display: block;
      width: 100%;
      height: 100%;
      rotate: 45deg;
      background-color: currentColor;
      opacity: 0%;
      transition: clip-path 0.3s, opacity 0.1s, rotate 0.3s, translate 0.3s;
      transition-delay: 0.1s;
      clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 70% 80%, 70% 100%);
      box-shadow: 0px 3px 0 0px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset;
      font-size: 1rem;
      line-height: 0.75;
    }
    &:focus-visible {
      outline: 2px solid var(--input-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
      }
      outline-offset: 0px;
    }
    &:checked, &[aria-checked="true"] {
      background-color: var(--input-color, #0000);
      border-color: var(--input-color, #0000);
      box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px 2px 0 var(--color-base-300);
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 0 #0000 inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px 2px 0 color-mix(in oklab, var(--color-base-300) 20%, #0000);
      }
      &:before {
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 0%, 70% 0%, 70% 100%);
        opacity: 100%;
      }
      @media (forced-colors: active) {
        &:before {
          rotate: 0deg;
          background-color: transparent;
          --tw-content: "✔︎";
          clip-path: none;
        }
      }
      @media print {
        &:before {
          rotate: 0deg;
          background-color: transparent;
          --tw-content: "✔︎";
          clip-path: none;
        }
      }
    }
    &:indeterminate {
      background-color: var(--color-neutral);
      &:before {
        rotate: 0deg;
        opacity: 100%;
        translate: 0 -35%;
        clip-path: polygon(20% 100%, 20% 80%, 50% 80%, 50% 80%, 80% 80%, 80% 100%);
      }
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 40%;
    }
  }
  .radio {
    position: relative;
    flex-shrink: 0;
    cursor: pointer;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    border-radius: calc(infinity * 1px);
    padding: calc(0.25rem * 1);
    vertical-align: middle;
    border: var(--border) solid var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    box-shadow: 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset;
    --size: calc(var(--size-selector, 0.25rem) * 6);
    width: var(--size);
    height: var(--size);
    color: var(--input-color, var(--color-neutral));
    &:before {
      display: block;
      width: 100%;
      height: 100%;
      border-radius: calc(infinity * 1px);
      --tw-content: "";
      content: var(--tw-content);
      background-size: auto, calc(var(--noise) * 100%);
      background-image: none, var(--fx-noise);
    }
    &:focus-visible {
      outline: 2px solid var(--input-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        outline: 2px solid color-mix(in oklab, var(--input-color, var(--color-neutral)) 30%, #0000);
      }
      outline-offset: 0px;
    }
    &:checked, &[aria-checked="true"] {
      animation: radio 0.2s ease-out;
      border-color: currentColor;
      background-color: var(--color-base-100);
      box-shadow: 0 1px 2px 0 var(--color-base-300);
      @supports (color: color-mix(in lab, red, red)) {
        box-shadow: 0 1px 2px 0 color-mix(in oklab, var(--color-base-300) 30%, #0000);
      }
      &:before {
        background-color: currentColor;
        box-shadow: 0 -1px oklch(0% 0 0 / calc(var(--depth) * 0.1)) inset, 0 8px 0 -4px oklch(100% 0 0 / calc(var(--depth) * 0.1)) inset, 0 1px oklch(0% 0 0 / calc(var(--depth) * 0.1));
      }
      @media (forced-colors: active) {
        &:before {
          outline-style: var(--tw-outline-style);
          outline-width: 1px;
          outline-offset: calc(1px * -1);
        }
      }
      @media print {
        &:before {
          outline: 0.25rem solid;
          outline-offset: -1rem;
        }
      }
    }
    &:disabled {
      cursor: not-allowed;
      opacity: 20%;
    }
  }
  .modal-header {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: calc(0.25rem * 6);
    :where(&) + .modal-body {
      padding-top: 0;
    }
  }
  .carousel {
    position: relative;
    width: 100%;
    overflow: hidden;
    border-radius: var(--radius-2xl);
  }
  .alert {
    position: relative;
    width: 100%;
    border-radius: var(--radius-box);
    padding: calc(0.25rem * 4);
    color: var(--color-neutral-content);
    text-align: start;
    background-size: auto, calc(var(--noise) * 100%);
    background-image: none, var(--fx-noise);
    background-color: var(--alert-bg);
    border: var(--border) solid var(--alert-border);
    box-shadow: 0 0.1875rem 0 -0.125rem oklch(100% 0 0 / calc(var(--depth) * 0.08)) inset;
    --alert-bg: var(--alert-color, var(--color-neutral));
    --alert-border: var(--alert-color, var(--color-neutral));
    &.alert-outline {
      color: var(--alert-color, var(--color-neutral));
      --alert-bg: transparent;
      box-shadow: none;
      background-image: none;
    }
    &.alert-soft {
      color: var(--alert-color, var(--color-neutral));
      --alert-bg: var(--alert-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --alert-bg: color-mix(in oklab, var(--alert-color, var(--color-neutral)) 10%, var(--color-base-100));
      }
      box-shadow: none;
      background-image: none;
    }
  }
  .absolute {
    position: absolute;
  }
  .fixed {
    position: fixed;
  }
  .relative {
    position: relative;
  }
  .static {
    position: static;
  }
  .sticky {
    position: sticky;
  }
  .inset-0 {
    inset: calc(var(--spacing) * 0);
  }
  .start-0 {
    inset-inline-start: calc(var(--spacing) * 0);
  }
  .end-3 {
    inset-inline-end: calc(var(--spacing) * 3);
  }
  .top-0 {
    top: calc(var(--spacing) * 0);
  }
  .top-1\/2 {
    top: calc(1/2 * 100%);
  }
  .top-3 {
    top: calc(var(--spacing) * 3);
  }
  .top-full {
    top: 100%;
  }
  .right-0 {
    right: calc(var(--spacing) * 0);
  }
  .-bottom-px {
    bottom: -1px;
  }
  .bottom-full {
    bottom: 100%;
  }
  .left-0 {
    left: calc(var(--spacing) * 0);
  }
  .input {
    display: inline-flex;
    width: 100%;
    flex-shrink: 1;
    cursor: text;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 3);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
    &::-moz-placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }
    &:focus-visible {
      --tw-outline-style: none;
      outline-style: none;
    }
    border: var(--border) solid #0000;
    height: var(--size);
    border-start-start-radius: var(--join-ss, var(--radius-field));
    border-start-end-radius: var(--join-se, var(--radius-field));
    border-end-start-radius: var(--join-es, var(--radius-field));
    border-end-end-radius: var(--join-ee, var(--radius-field));
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    --size: calc(var(--size-field, 0.25rem) * 9.5);
    &:hover:not(:focus, :focus-within), &:has(:hover):not(:focus, :focus-within) {
      border-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
      }
    }
    &:where(input) {
      display: inline-block;
    }
    :where(input:not([type="checkbox"]):not([type="radio"])) {
      display: inline-block;
      height: 100%;
      width: 100%;
      -webkit-appearance: none;
         -moz-appearance: none;
              appearance: none;
      background-color: transparent;
      border: none;
      &:focus, &:focus-within, &:focus-visible {
        --tw-outline-style: none;
        outline-style: none;
      }
    }
    &:focus, &:focus-within {
      --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --input-color: var(--color-primary);
      --tw-shadow-color: var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
      }
      outline: 1px solid var(--input-color);
      isolation: isolate;
    }
    &:has(> input[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-style: var(--tw-border-style);
      border-width: 0px;
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
      box-shadow: none;
    }
    &:has(> input[disabled]) > input[disabled] {
      cursor: not-allowed;
    }
    &::-webkit-date-and-time-value {
      text-align: inherit;
    }
    &[type="number"] {
      &::-webkit-inner-spin-button {
        margin-block: calc(0.25rem * -3);
        margin-inline-end: calc(0.25rem * -3);
      }
    }
    &:has(> .input-floating) input {
      &::-moz-placeholder {
        color: transparent;
      }
      &::placeholder {
        color: transparent;
      }
      &:focus {
        &::-moz-placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
      }
    }
  }
  .input\! {
    display: inline-flex !important;
    width: 100% !important;
    flex-shrink: 1 !important;
    cursor: text !important;
    -webkit-appearance: none !important;
       -moz-appearance: none !important;
            appearance: none !important;
    background-color: var(--color-base-100) !important;
    padding-inline: calc(0.25rem * 3) !important;
    font-size: var(--text-base) !important;
    line-height: var(--tw-leading, var(--text-base--line-height)) !important;
    --tw-font-weight: var(--font-weight-normal) !important;
    font-weight: var(--font-weight-normal) !important;
    color: var(--color-base-content) !important;
    &::-moz-placeholder {
      color: var(--color-base-content) !important;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent) !important;
      }
    }
    &::placeholder {
      color: var(--color-base-content) !important;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent) !important;
      }
    }
    &:focus-visible {
      --tw-outline-style: none !important;
      outline-style: none !important;
    }
    border: var(--border) solid #0000 !important;
    height: var(--size) !important;
    border-start-start-radius: var(--join-ss, var(--radius-field)) !important;
    border-start-end-radius: var(--join-se, var(--radius-field)) !important;
    border-end-start-radius: var(--join-es, var(--radius-field)) !important;
    border-end-end-radius: var(--join-ee, var(--radius-field)) !important;
    border-color: var(--input-color) !important;
    --input-color: var(--color-base-content) !important;
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000) !important;
    }
    --size: calc(var(--size-field, 0.25rem) * 9.5) !important;
    &:hover:not(:focus, :focus-within), &:has(:hover):not(:focus, :focus-within) {
      border-color: var(--color-base-content) !important;
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent) !important;
      }
    }
    &:where(input) {
      display: inline-block !important;
    }
    :where(input:not([type="checkbox"]):not([type="radio"])) {
      display: inline-block !important;
      height: 100% !important;
      width: 100% !important;
      -webkit-appearance: none !important;
         -moz-appearance: none !important;
              appearance: none !important;
      background-color: transparent !important;
      border: none !important;
      &:focus, &:focus-within, &:focus-visible {
        --tw-outline-style: none !important;
        outline-style: none !important;
      }
    }
    &:focus, &:focus-within {
      --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05)) !important;
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow) !important;
      --input-color: var(--color-primary) !important;
      --tw-shadow-color: var(--input-color) !important;
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000) !important;
      }
      outline: 1px solid var(--input-color) !important;
      isolation: isolate !important;
    }
    &:has(> input[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed !important;
      border-style: var(--tw-border-style) !important;
      border-width: 0px !important;
      background-color: var(--color-neutral) !important;
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent) !important;
      }
      color: var(--color-base-content) !important;
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent) !important;
      }
      box-shadow: none !important;
    }
    &:has(> input[disabled]) > input[disabled] {
      cursor: not-allowed !important;
    }
    &::-webkit-date-and-time-value {
      text-align: inherit !important;
    }
    &[type="number"] {
      &::-webkit-inner-spin-button {
        margin-block: calc(0.25rem * -3) !important;
        margin-inline-end: calc(0.25rem * -3) !important;
      }
    }
    &:has(> .input-floating) input {
      &::-moz-placeholder {
        color: transparent !important;
      }
      &::placeholder {
        color: transparent !important;
      }
      &:focus {
        &::-moz-placeholder {
          color: var(--color-base-content) !important;
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent) !important;
          }
        }
        &::placeholder {
          color: var(--color-base-content) !important;
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent) !important;
          }
        }
      }
    }
  }
  .textarea {
    display: inline-flex;
    min-height: calc(0.25rem * 20);
    width: 100%;
    flex-shrink: 1;
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    border-radius: var(--radius-field);
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    &::-moz-placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }
    &::placeholder {
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }
    &:hover {
      @media (hover: hover) {
        border-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-color: color-mix(in oklab, var(--color-base-content) 60%, transparent);
        }
      }
    }
    &:focus-visible {
      --tw-outline-style: none;
      outline-style: none;
    }
    border: var(--border) solid #0000;
    border-color: var(--input-color);
    --input-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      --input-color: color-mix(in oklab, var(--color-base-content) 40%, #0000);
    }
    :where(textarea) {
      -webkit-appearance: none;
         -moz-appearance: none;
              appearance: none;
      background-color: transparent;
      border: none;
      &:focus, &:focus-within {
        --tw-outline-style: none;
        outline-style: none;
      }
    }
    &:focus, &:focus-within {
      --tw-shadow: 0 1px 2px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.05));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --input-color: var(--color-primary);
      --tw-shadow-color: var(--input-color);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, var(--input-color) 30%, #0000);
      }
      outline: 1px solid var(--input-color);
      border-color: var(--input-color);
      isolation: isolate;
    }
    &:has(> textarea[disabled]), &:is(:disabled, [disabled]) {
      cursor: not-allowed;
      border-color: var(--color-base-200);
      background-color: var(--color-base-200);
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
      }
      &::-moz-placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }
      &::placeholder {
        color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
        }
      }
    }
    &:has(> textarea[disabled]) > textarea[disabled] {
      cursor: not-allowed;
    }
    &:has(> textarea) {
      padding: calc(0.25rem * 0);
      textarea {
        height: auto;
        min-height: calc(0.25rem * 20);
        width: 100%;
        &:first-child {
          padding-block: calc(0.25rem * 2);
          padding-inline-start: calc(0.25rem * 4);
        }
        &:nth-child(2) {
          padding-block: calc(0.25rem * 2);
        }
        &:last-child {
          padding-block: calc(0.25rem * 2);
          padding-inline-end: calc(0.25rem * 4);
        }
      }
    }
    &:has(> .textarea-floating) {
      padding: calc(0.25rem * 0);
      :where(.textarea-floating:first-child) > textarea {
        padding-block: calc(0.25rem * 2);
        padding-inline-start: calc(0.25rem * 4);
      }
      :where(.textarea-floating:nth-child(2)) > textarea {
        padding-block: calc(0.25rem * 2);
      }
      :where(.textarea-floating:last-child) > textarea {
        padding-block: calc(0.25rem * 2);
        padding-inline-end: calc(0.25rem * 4);
      }
      :where(.textarea-floating:nth-child(2)) .textarea-floating-label, :where(.textarea-floating:last-child) .textarea-floating-label {
        margin-inline-start: calc(0.25rem * 0);
      }
      & * > textarea {
        width: 100%;
        height: 100%;
        min-height: calc(0.25rem * 20);
      }
    }
    &:has(> .textarea-floating) textarea {
      &::-moz-placeholder {
        color: transparent;
      }
      &::placeholder {
        color: transparent;
      }
      &:focus {
        &::-moz-placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
        &::placeholder {
          color: var(--color-base-content);
          @supports (color: color-mix(in lab, red, red)) {
            color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
          }
        }
      }
    }
  }
  .isolate {
    isolation: isolate;
  }
  .stack {
    display: inline-grid;
    place-items: center;
    align-items: flex-end;
    & > * {
      grid-column-start: 1;
      grid-row-start: 1;
      height: 100%;
      width: 100%;
      opacity: 60%;
      transform: translateY(14%) scale(0.9);
      z-index: 1;
    }
    & > *:nth-child(2) {
      opacity: 80%;
      transform: translateY(7%) scale(0.95);
      z-index: 2;
    }
    & > *:nth-child(1) {
      opacity: 100%;
      transform: translateY(0) scale(1) translateX(0);
      z-index: 3;
    }
  }
  .dropdown-menu {
    z-index: 10;
    margin-top: calc(0.25rem * 2);
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(0.25rem * 1) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(0.25rem * 1) * calc(1 - var(--tw-space-y-reverse)));
    }
    border-radius: var(--radius-box);
    background-color: var(--color-base-100);
    padding: calc(0.25rem * 2);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    text-wrap: nowrap;
    opacity: 0%;
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
    transition-property: opacity,margin;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 300ms;
    --tw-duration: 300ms;
  }
  .z-0 {
    z-index: 0;
  }
  .z-10 {
    z-index: 10;
  }
  .z-50 {
    z-index: 50;
  }
  .col-12 {
    grid-column: 12;
  }
  .col-span-6 {
    grid-column: span 6 / span 6;
  }
  .col-span-12 {
    grid-column: span 12 / span 12;
  }
  .stat {
    display: inline-grid;
    width: 100%;
    -moz-column-gap: calc(0.25rem * 4);
         column-gap: calc(0.25rem * 4);
    row-gap: calc(0.25rem * 1);
    padding-inline: calc(0.25rem * 6);
    padding-block: calc(0.25rem * 4);
    grid-template-columns: repeat(1, 1fr);
    border-color: inherit;
    .stat-figure {
      grid-column-start: 2;
      grid-row: span 3 / span 3;
      grid-row-start: 1;
      place-self: center;
      justify-self: flex-end;
    }
    .stat-title {
      grid-column-start: 1;
      white-space: nowrap;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
      }
    }
    .stat-value {
      grid-column-start: 1;
      font-size: var(--text-3xl);
      line-height: var(--tw-leading, var(--text-3xl--line-height));
      --tw-font-weight: var(--font-weight-semibold);
      font-weight: var(--font-weight-semibold);
      white-space: nowrap;
      color: var(--color-base-content);
    }
    .stat-desc {
      grid-column-start: 1;
      font-size: var(--text-xs);
      line-height: var(--tw-leading, var(--text-xs--line-height));
      white-space: nowrap;
      color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
      }
    }
    .stat-actions {
      grid-column-start: 1;
      margin-top: calc(0.25rem * 3);
      white-space: nowrap;
    }
  }
  .float-left {
    float: left;
  }
  .float-right {
    float: right;
  }
  .container {
    width: 100%;
    @media (width >= 40rem) {
      max-width: 40rem;
    }
    @media (width >= 48rem) {
      max-width: 48rem;
    }
    @media (width >= 64rem) {
      max-width: 64rem;
    }
    @media (width >= 80rem) {
      max-width: 80rem;
    }
    @media (width >= 96rem) {
      max-width: 96rem;
    }
  }
  .\!filter {
    display: flex !important;
    flex-wrap: wrap !important;
    input[type="radio"] {
      width: auto !important;
    }
    input {
      overflow: hidden !important;
      opacity: 100% !important;
      scale: 1 !important;
      transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s !important;
      &:not(:last-child) {
        margin-inline-end: calc(0.25rem * 1) !important;
      }
      &.filter-reset {
        aspect-ratio: 1 / 1 !important;
        &::after {
          content: "×" !important;
        }
      }
    }
    &:not(:has(input:checked:not(.filter-reset))) {
      .filter-reset, input[type="reset"] {
        scale: 0 !important;
        border-width: 0 !important;
        margin-inline: calc(0.25rem * 0) !important;
        width: calc(0.25rem * 0) !important;
        padding-inline: calc(0.25rem * 0) !important;
        opacity: 0% !important;
      }
    }
    &:has(input:checked:not(.filter-reset)) {
      input:not(:checked, .filter-reset, input[type="reset"]) {
        scale: 0 !important;
        border-width: 0 !important;
        margin-inline: calc(0.25rem * 0) !important;
        width: calc(0.25rem * 0) !important;
        padding-inline: calc(0.25rem * 0) !important;
        opacity: 0% !important;
      }
    }
  }
  .filter {
    display: flex;
    flex-wrap: wrap;
    input[type="radio"] {
      width: auto;
    }
    input {
      overflow: hidden;
      opacity: 100%;
      scale: 1;
      transition: margin 0.1s, opacity 0.3s, padding 0.3s, border-width 0.1s;
      &:not(:last-child) {
        margin-inline-end: calc(0.25rem * 1);
      }
      &.filter-reset {
        aspect-ratio: 1 / 1;
        &::after {
          content: "×";
        }
      }
    }
    &:not(:has(input:checked:not(.filter-reset))) {
      .filter-reset, input[type="reset"] {
        scale: 0;
        border-width: 0;
        margin-inline: calc(0.25rem * 0);
        width: calc(0.25rem * 0);
        padding-inline: calc(0.25rem * 0);
        opacity: 0%;
      }
    }
    &:has(input:checked:not(.filter-reset)) {
      input:not(:checked, .filter-reset, input[type="reset"]) {
        scale: 0;
        border-width: 0;
        margin-inline: calc(0.25rem * 0);
        width: calc(0.25rem * 0);
        padding-inline: calc(0.25rem * 0);
        opacity: 0%;
      }
    }
  }
  .modal-dialog {
    margin-inline: auto;
    width: 100%;
    opacity: 0%;
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 500ms;
    --tw-duration: 500ms;
    @media (width >= 40rem) {
      max-width: calc(0.25rem * 128);
    }
  }
  .mx-1 {
    margin-inline: calc(var(--spacing) * 1);
  }
  .mx-auto {
    margin-inline: auto;
  }
  .ms-2 {
    margin-inline-start: calc(var(--spacing) * 2);
  }
  .input {
    &::file-selector-button {
      margin-inline-end: calc(0.25rem * 4);
      display: inline-flex;
      height: 100%;
      flex-shrink: 0;
      cursor: pointer;
      flex-wrap: wrap;
      align-items: center;
      justify-content: center;
      border-style: var(--tw-border-style);
      border-width: 0px;
      background-color: var(--color-primary);
      padding-inline: calc(0.25rem * 4);
      text-align: center;
      font-size: var(--text-base);
      line-height: var(--tw-leading, var(--text-base--line-height));
      --tw-leading: 1;
      --tw-font-weight: var(--font-weight-semibold);
      font-weight: var(--font-weight-semibold);
      color: var(--color-primary-content);
      text-transform: uppercase;
      text-decoration-line: none;
      webkit-user-select: none;
      -webkit-user-select: none;
         -moz-user-select: none;
              user-select: none;
      --input-color: var(--color-primary);
      &.input-sm {
        font-size: var(--text-sm);
        line-height: var(--tw-leading, var(--text-sm--line-height));
      }
      &.input-md {
        font-size: var(--text-base);
        line-height: var(--tw-leading, var(--text-base--line-height));
      }
      &.input-lg {
        font-size: var(--text-lg);
        line-height: var(--tw-leading, var(--text-lg--line-height));
      }
      &.input-xl {
        font-size: var(--text-xl);
        line-height: var(--tw-leading, var(--text-xl--line-height));
      }
    }
    &[type="file"] {
      overflow: hidden;
      padding-inline-start: calc(0.25rem * 0);
    }
    .input-floating &::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-inline-end: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000);
      }
      outline: none;
    }
  }
  .input\! {
    &::file-selector-button {
      margin-inline-end: calc(0.25rem * 4) !important;
      display: inline-flex !important;
      height: 100% !important;
      flex-shrink: 0 !important;
      cursor: pointer !important;
      flex-wrap: wrap !important;
      align-items: center !important;
      justify-content: center !important;
      border-style: var(--tw-border-style) !important;
      border-width: 0px !important;
      background-color: var(--color-primary) !important;
      padding-inline: calc(0.25rem * 4) !important;
      text-align: center !important;
      font-size: var(--text-base) !important;
      line-height: var(--tw-leading, var(--text-base--line-height)) !important;
      --tw-leading: 1 !important;
      --tw-font-weight: var(--font-weight-semibold) !important;
      font-weight: var(--font-weight-semibold) !important;
      color: var(--color-primary-content) !important;
      text-transform: uppercase !important;
      text-decoration-line: none !important;
      webkit-user-select: none !important;
      -webkit-user-select: none !important;
         -moz-user-select: none !important;
              user-select: none !important;
      --input-color: var(--color-primary) !important;
      &.input-sm {
        font-size: var(--text-sm) !important;
        line-height: var(--tw-leading, var(--text-sm--line-height)) !important;
      }
      &.input-md {
        font-size: var(--text-base) !important;
        line-height: var(--tw-leading, var(--text-base--line-height)) !important;
      }
      &.input-lg {
        font-size: var(--text-lg) !important;
        line-height: var(--tw-leading, var(--text-lg--line-height)) !important;
      }
      &.input-xl {
        font-size: var(--text-xl) !important;
        line-height: var(--tw-leading, var(--text-xl--line-height)) !important;
      }
    }
    &[type="file"] {
      overflow: hidden !important;
      padding-inline-start: calc(0.25rem * 0) !important;
    }
    .input-floating &::file-selector-button {
      background-color: var(--color-base-100) !important;
      color: var(--color-base-content) !important;
      border-inline-end: var(--border) solid var(--color-base-content) !important;
      @supports (color: color-mix(in lab, red, red)) {
        border-inline-end: var(--border) solid color-mix(in oklab, var(--color-base-content) 40%, #0000) !important;
      }
      outline: none !important;
    }
  }
  .me-2 {
    margin-inline-end: calc(var(--spacing) * 2);
  }
  .me-3 {
    margin-inline-end: calc(var(--spacing) * 3);
  }
  .mt-1 {
    margin-top: calc(var(--spacing) * 1);
  }
  .mt-2 {
    margin-top: calc(var(--spacing) * 2);
  }
  .mt-4 {
    margin-top: calc(var(--spacing) * 4);
  }
  .mt-6 {
    margin-top: calc(var(--spacing) * 6);
  }
  .mr-2 {
    margin-right: calc(var(--spacing) * 2);
  }
  .mr-4 {
    margin-right: calc(var(--spacing) * 4);
  }
  .footer {
    display: grid;
    width: 100%;
    grid-auto-flow: row;
    place-items: start;
    -moz-column-gap: calc(0.25rem * 4);
         column-gap: calc(0.25rem * 4);
    row-gap: calc(0.25rem * 10);
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
    @media (width >= 48rem) {
      grid-auto-flow: column;
    }
    & > * {
      display: grid;
      place-items: start;
      gap: calc(0.25rem * 3);
    }
    .footer-title {
      margin-bottom: calc(0.25rem * 1);
      font-size: var(--text-base);
      line-height: var(--tw-leading, var(--text-base--line-height));
      --tw-font-weight: var(--font-weight-medium);
      font-weight: var(--font-weight-medium);
      color: var(--color-base-content);
    }
    &.footer-center {
      place-items: center;
      text-align: center;
      @media (width >= 48rem) {
        grid-auto-flow: row dense;
      }
      & > * {
        place-items: center;
      }
    }
    :where(.link) {
      --tw-font-weight: var(--font-weight-normal);
      font-weight: var(--font-weight-normal);
    }
  }
  .mb-0\.5 {
    margin-bottom: calc(var(--spacing) * 0.5);
  }
  .mb-1 {
    margin-bottom: calc(var(--spacing) * 1);
  }
  .mb-2 {
    margin-bottom: calc(var(--spacing) * 2);
  }
  .mb-2\.5 {
    margin-bottom: calc(var(--spacing) * 2.5);
  }
  .mb-4 {
    margin-bottom: calc(var(--spacing) * 4);
  }
  .mb-6 {
    margin-bottom: calc(var(--spacing) * 6);
  }
  .-ml-px {
    margin-left: -1px;
  }
  .ml-3 {
    margin-left: calc(var(--spacing) * 3);
  }
  .status {
    display: inline-block;
    aspect-ratio: 1 / 1;
    width: calc(0.25rem * 2.5);
    height: calc(0.25rem * 2.5);
    border-radius: calc(infinity * 1px);
    background-color: var(--color-neutral);
    background-position: center;
    background-repeat: no-repeat;
    vertical-align: middle;
    color: var(--color-neutral);
    background-image: radial-gradient(circle at 35% 30%, oklch(1 0 0 / calc(var(--depth) * 0.5)), #0000);
    box-shadow: 0 2px 3px -1px currentColor;
    @supports (color: color-mix(in lab, red, red)) {
      box-shadow: 0 2px 3px -1px color-mix(in oklab, currentColor calc(var(--depth) * 100%), #0000);
    }
  }
  .progress-step {
    display: flex;
    height: calc(0.25rem * 1.5);
    width: 100%;
    flex-direction: column;
    justify-content: center;
    background-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
    }
    text-align: center;
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
    white-space: nowrap;
    color: var(--color-base-100);
  }
  .progress {
    display: flex;
    height: calc(0.25rem * 1.5);
    width: 100%;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: var(--color-base-200);
  }
  .icon-\[tabler--chevron-down\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m6 9l6 6l6-6'/%3E%3C/svg%3E");
  }
  .icon-\[tabler--logout\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cg fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2'%3E%3Cpath d='M14 8V6a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2-2v-2'/%3E%3Cpath d='M9 12h12l-3-3m0 6l3-3'/%3E%3C/g%3E%3C/svg%3E");
  }
  .icon-\[tabler--pencil\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 20h4L18.5 9.5a2.828 2.828 0 1 0-4-4L4 16zm9.5-13.5l4 4'/%3E%3C/svg%3E");
  }
  .icon-\[tabler--plus\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 5v14m-7-7h14'/%3E%3C/svg%3E");
  }
  .icon-\[tabler--refresh\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M20 11A8.1 8.1 0 0 0 4.5 9M4 5v4h4m-4 4a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4'/%3E%3C/svg%3E");
  }
  .icon-\[tabler--trash\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M4 7h16m-10 4v6m4-6v6M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2l1-12M9 7V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v3'/%3E%3C/svg%3E");
  }
  .icon-\[tabler--user\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M8 7a4 4 0 1 0 8 0a4 4 0 0 0-8 0M6 21v-2a4 4 0 0 1 4-4h4a4 4 0 0 1 4 4v2'/%3E%3C/svg%3E");
  }
  .icon-\[tabler--x\] {
    display: inline-block;
    width: 1em;
    height: 1em;
    background-color: currentColor;
    -webkit-mask-image: var(--svg);
    mask-image: var(--svg);
    -webkit-mask-repeat: no-repeat;
    mask-repeat: no-repeat;
    -webkit-mask-size: 100% 100%;
    mask-size: 100% 100%;
    --svg: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' width='24' height='24'%3E%3Cpath fill='none' stroke='black' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M18 6L6 18M6 6l12 12'/%3E%3C/svg%3E");
  }
  .tabs {
    display: flex;
    --tabs-height: auto;
    --tabs-direction: row;
    height: var(--tabs-height);
    flex-direction: var(--tabs-direction);
  }
  .progress-bar {
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    border-radius: var(--radius-box);
    background-color: var(--color-neutral);
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    white-space: nowrap;
    color: var(--color-neutral-content);
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-timing-function: var(--ease-in-out);
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 500ms;
    --tw-duration: 500ms;
    --tw-ease: var(--ease-in-out);
    &.progress-indeterminate {
      width: 100%;
      background: linear-gradient(90deg, rgba(0, 0, 0, 0) 50%, var(--progress-color) 50%);
      background-size: 50% 100%;
      background-repeat: no-repeat;
      animation: indeterminate-progress 4s infinite ease-in-out;
    }
  }
  .navbar {
    display: flex;
    width: 100%;
    align-items: center;
    background-color: var(--color-base-100);
    padding-inline: calc(0.25rem * 6);
    padding-block: calc(0.25rem * 3);
  }
  .navbar-start {
    display: flex;
    width: calc(1/2 * 100%);
    justify-content: flex-start;
  }
  .card-body {
    display: flex;
    flex: auto;
    flex-direction: column;
    gap: calc(0.25rem * 2);
    padding: var(--card-p, 1.5rem);
    :where(p) {
      flex-grow: 1;
    }
    :where(.card-header) + & {
      padding-top: 0;
    }
    :where(&) + .card-footer {
      padding-top: 0;
    }
  }
  .label-text {
    display: block;
    cursor: pointer;
    padding: calc(0.25rem * 1);
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    color: var(--color-base-content);
  }
  .carousel-body {
    display: flex;
    flex-wrap: nowrap;
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 700ms;
    --tw-duration: 700ms;
  }
  .join {
    display: inline-flex;
    align-items: stretch;
    --join-ss: 0;
    --join-se: 0;
    --join-es: 0;
    --join-ee: 0;
    :where(.join-item) {
      border-start-start-radius: var(--join-ss, 0);
      border-start-end-radius: var(--join-se, 0);
      border-end-start-radius: var(--join-es, 0);
      border-end-end-radius: var(--join-ee, 0);
      * {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:first-child) {
      --join-ss: var(--radius-field);
      --join-se: 0;
      --join-es: var(--radius-field);
      --join-ee: 0;
    }
    :first-child:not(:last-child) {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: 0;
        --join-es: var(--radius-field);
        --join-ee: 0;
      }
    }
    > .join-item:where(:last-child) {
      --join-ss: 0;
      --join-se: var(--radius-field);
      --join-es: 0;
      --join-ee: var(--radius-field);
    }
    :last-child:not(:first-child) {
      :where(.join-item) {
        --join-ss: 0;
        --join-se: var(--radius-field);
        --join-es: 0;
        --join-ee: var(--radius-field);
      }
    }
    > .join-item:where(:only-child) {
      --join-ss: var(--radius-field);
      --join-se: var(--radius-field);
      --join-es: var(--radius-field);
      --join-ee: var(--radius-field);
    }
    :only-child {
      :where(.join-item) {
        --join-ss: var(--radius-field);
        --join-se: var(--radius-field);
        --join-es: var(--radius-field);
        --join-ee: var(--radius-field);
      }
    }
  }
  .validate {
    & *:valid ~ .success-message {
      display: block;
    }
    & *:has(:valid) ~ .success-message {
      display: block;
    }
    & *:invalid ~ .error-message {
      display: block;
    }
    & *:has(:invalid) ~ .error-message {
      display: block;
    }
    & .input:valid::file-selector-button {
      background-color: var(--color-success);
      color: var(--color-success-content);
      --input-color: var(--color-success);
    }
    & .input:invalid::file-selector-button {
      background-color: var(--color-error);
      color: var(--color-error-content);
      --input-color: var(--color-error);
    }
    & .input-floating > .input:valid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    & .input-floating > .input:invalid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
    & .label-text:has(~ :valid) {
      color: var(--color-success);
    }
    & .label-text:has(~ * :valid) {
      color: var(--color-success);
    }
    & :is(:valid) ~ .helper-text {
      color: var(--color-success);
    }
    & *:has(:valid) ~ .helper-text {
      color: var(--color-success);
    }
    & :is(:valid) ~ .label-text {
      color: var(--color-success);
    }
    & :is(:valid) ~ .label-text * {
      color: var(--color-success);
    }
    & :is(:valid) ~ * >.label-text {
      color: var(--color-success);
    }
    & .label-text:has(~ :invalid) {
      color: var(--color-error);
    }
    & .label-text:has(~ * :invalid) {
      color: var(--color-error);
    }
    & :is(:invalid) ~ .helper-text {
      color: var(--color-error);
    }
    & *:has(:invalid) ~ .helper-text {
      color: var(--color-error);
    }
    & :is(:invalid) ~ .label-text {
      color: var(--color-error);
    }
    & :is(:invalid) ~ .label-text * {
      color: var(--color-error);
    }
    & :is(:invalid) ~ * >.label-text {
      color: var(--color-error);
    }
    & select:has(~ * > .selected) + .advance-select-toggle {
      --input-color: var(--color-success);
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    & select:not(:has(~ * > .selected)) + .advance-select-toggle {
      --input-color: var(--color-error);
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
    & .input-floating:has(:valid) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      .input-floating-label {
        color: var(--color-success);
      }
      &:not(:has(input:-moz-placeholder)) {
        .input-floating-label {
          color: var(--color-success);
        }
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-success);
        }
      }
    }
    & .input-floating:has(:invalid) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      .input-floating-label {
        color: var(--color-error);
      }
      &:not(:has(input:-moz-placeholder)) {
        .input-floating-label {
          color: var(--color-error);
        }
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-error);
        }
      }
    }
    & .textarea-floating:has(:valid) {
      .textarea-floating-label {
        color: var(--color-success);
      }
      &:not(:has(textarea:-moz-placeholder)) {
        .textarea-floating-label {
          color: var(--color-success);
        }
      }
      &:focus-within, &:not(:has(textarea:placeholder-shown)), &:has(.textarea:focus) {
        .textarea-floating-label {
          color: var(--color-success);
        }
      }
    }
    & .textarea-floating:has(:invalid) {
      .textarea-floating-label {
        color: var(--color-error);
      }
      &:not(:has(textarea:-moz-placeholder)) {
        .textarea-floating-label {
          color: var(--color-error);
        }
      }
      &:focus-within, &:not(:has(textarea:placeholder-shown)), &:has(.textarea:focus) {
        .textarea-floating-label {
          color: var(--color-error);
        }
      }
    }
    & .select-floating:has(:valid) {
      .select-floating-label {
        color: var(--color-success);
      }
      &:not(:has(select:-moz-placeholder)) {
        .select-floating-label {
          color: var(--color-success);
        }
      }
      &:focus-within, &:not(:has(select:placeholder-shown)), &:has(.select:focus) {
        .select-floating-label {
          color: var(--color-success);
        }
      }
    }
    & .select-floating:has(:invalid) {
      .select-floating-label {
        color: var(--color-error);
      }
      &:not(:has(select:-moz-placeholder)) {
        .select-floating-label {
          color: var(--color-error);
        }
      }
      &:focus-within, &:not(:has(select:placeholder-shown)), &:has(.select:focus) {
        .select-floating-label {
          color: var(--color-error);
        }
      }
    }
  }
  .tooltip {
    display: inline-block;
    text-align: center;
  }
  .\!hidden {
    display: none !important;
  }
  .block {
    display: block;
  }
  .contents {
    display: contents;
  }
  .flex {
    display: flex;
  }
  .grid {
    display: grid;
  }
  .hidden {
    display: none;
  }
  .inline {
    display: inline;
  }
  .inline-block {
    display: inline-block;
  }
  .inline-flex {
    display: inline-flex;
  }
  .table {
    display: table;
  }
  .table-caption {
    display: table-caption;
  }
  .table-cell {
    display: table-cell;
  }
  .carousel-dot {
    width: calc(0.25rem * 3);
    height: calc(0.25rem * 3);
    cursor: pointer;
    border-radius: calc(infinity * 1px);
    background-color: var(--color-neutral);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-neutral) 30%, transparent);
    }
  }
  .btn-circle {
    border-radius: calc(infinity * 1px);
    padding-inline: calc(0.25rem * 0);
    width: var(--size);
    height: var(--size);
  }
  .size-4 {
    width: calc(var(--spacing) * 4);
    height: calc(var(--spacing) * 4);
  }
  .size-5 {
    width: calc(var(--spacing) * 5);
    height: calc(var(--spacing) * 5);
  }
  .size-6 {
    width: calc(var(--spacing) * 6);
    height: calc(var(--spacing) * 6);
  }
  .size-8 {
    width: calc(var(--spacing) * 8);
    height: calc(var(--spacing) * 8);
  }
  .input {
    & > .select {
      height: auto;
      border-style: var(--tw-border-style);
      border-width: 0px;
      &:focus, &:focus-within {
        --tw-shadow: 0 0 #0000;
        box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
        outline-style: var(--tw-outline-style);
        outline-width: 0px;
      }
    }
  }
  .input\! {
    & > .select {
      height: auto !important;
      border-style: var(--tw-border-style) !important;
      border-width: 0px !important;
      &:focus, &:focus-within {
        --tw-shadow: 0 0 #0000 !important;
        box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow) !important;
        outline-style: var(--tw-outline-style) !important;
        outline-width: 0px !important;
      }
    }
  }
  .h-2 {
    height: calc(var(--spacing) * 2);
  }
  .h-3 {
    height: calc(var(--spacing) * 3);
  }
  .h-5 {
    height: calc(var(--spacing) * 5);
  }
  .h-16 {
    height: calc(var(--spacing) * 16);
  }
  .h-24 {
    height: calc(var(--spacing) * 24);
  }
  .h-32 {
    height: calc(var(--spacing) * 32);
  }
  .h-auto {
    height: auto;
  }
  .h-full {
    height: 100%;
  }
  .min-h-screen {
    min-height: 100vh;
  }
  .advance-select-option {
    width: 100%;
    cursor: pointer;
    border-radius: var(--radius-field);
    padding-inline: calc(0.25rem * 4);
    padding-block: calc(0.25rem * 2.5);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    color: var(--color-base-content);
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-neutral);
        @supports (color: color-mix(in lab, red, red)) {
          background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
        }
      }
    }
    &:focus {
      background-color: var(--color-neutral);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
      }
      --tw-outline-style: none;
      outline-style: none;
    }
  }
  .modal-body {
    overflow-x: hidden;
    overflow-y: auto;
    padding: calc(0.25rem * 6);
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    --tw-font-weight: var(--font-weight-normal);
    font-weight: var(--font-weight-normal);
    &::-webkit-scrollbar {
      width: calc(0.25rem * 2);
    }
    :where(.modal-header) + & {
      padding-top: 0;
    }
    :where(&) + .modal-footer {
      padding-top: 0;
    }
  }
  .w-3 {
    width: calc(var(--spacing) * 3);
  }
  .w-5 {
    width: calc(var(--spacing) * 5);
  }
  .w-16 {
    width: calc(var(--spacing) * 16);
  }
  .w-24 {
    width: calc(var(--spacing) * 24);
  }
  .w-32 {
    width: calc(var(--spacing) * 32);
  }
  .w-40 {
    width: calc(var(--spacing) * 40);
  }
  .w-48 {
    width: calc(var(--spacing) * 48);
  }
  .w-50 {
    width: calc(var(--spacing) * 50);
  }
  .w-60 {
    width: calc(var(--spacing) * 60);
  }
  .w-80 {
    width: calc(var(--spacing) * 80);
  }
  .w-90 {
    width: calc(var(--spacing) * 90);
  }
  .w-96 {
    width: calc(var(--spacing) * 96);
  }
  .w-100 {
    width: calc(var(--spacing) * 100);
  }
  .w-120 {
    width: calc(var(--spacing) * 120);
  }
  .w-150 {
    width: calc(var(--spacing) * 150);
  }
  .w-full {
    width: 100%;
  }
  .max-w-full {
    max-width: 100%;
  }
  .max-w-md {
    max-width: var(--container-md);
  }
  .max-w-screen-lg {
    max-width: var(--breakpoint-lg);
  }
  .max-w-sm {
    max-width: var(--container-sm);
  }
  .min-w-60 {
    min-width: calc(var(--spacing) * 60);
  }
  .min-w-full {
    min-width: 100%;
  }
  .flex-1 {
    flex: 1;
  }
  .shrink-0 {
    flex-shrink: 0;
  }
  .flex-grow {
    flex-grow: 1;
  }
  .grow {
    flex-grow: 1;
  }
  .basis-full {
    flex-basis: 100%;
  }
  .-translate-y-1\/2 {
    --tw-translate-y: calc(calc(1/2 * 100%) * -1);
    translate: var(--tw-translate-x) var(--tw-translate-y);
  }
  .transform {
    transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
  }
  .cursor-default {
    cursor: default;
  }
  .cursor-pointer {
    cursor: pointer;
  }
  .resize {
    resize: both;
  }
  .list-inside {
    list-style-position: inside;
  }
  .list-disc {
    list-style-type: disc;
  }
  .appearance-none {
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
  }
  .grid-flow-col {
    grid-auto-flow: column;
  }
  .grid-flow-row {
    grid-auto-flow: row;
  }
  .grid-cols-12 {
    grid-template-columns: repeat(12, minmax(0, 1fr));
  }
  .flex-col {
    flex-direction: column;
  }
  .flex-nowrap {
    flex-wrap: nowrap;
  }
  .content-center {
    align-content: center;
  }
  .items-center {
    align-items: center;
  }
  .items-center-safe {
    align-items: safe center;
  }
  .items-start {
    align-items: flex-start;
  }
  .justify-between {
    justify-content: space-between;
  }
  .justify-center {
    justify-content: center;
  }
  .justify-center-safe {
    justify-content: safe center;
  }
  .justify-end {
    justify-content: flex-end;
  }
  .justify-items-center {
    justify-items: center;
  }
  .gap-2 {
    gap: calc(var(--spacing) * 2);
  }
  .gap-12 {
    gap: calc(var(--spacing) * 12);
  }
  .space-y-4 {
    :where(& > :not(:last-child)) {
      --tw-space-y-reverse: 0;
      margin-block-start: calc(calc(var(--spacing) * 4) * var(--tw-space-y-reverse));
      margin-block-end: calc(calc(var(--spacing) * 4) * calc(1 - var(--tw-space-y-reverse)));
    }
  }
  .gap-x-2 {
    -moz-column-gap: calc(var(--spacing) * 2);
         column-gap: calc(var(--spacing) * 2);
  }
  .gap-x-3 {
    -moz-column-gap: calc(var(--spacing) * 3);
         column-gap: calc(var(--spacing) * 3);
  }
  .gap-x-3\.5 {
    -moz-column-gap: calc(var(--spacing) * 3.5);
         column-gap: calc(var(--spacing) * 3.5);
  }
  .space-x-2 {
    :where(& > :not(:last-child)) {
      --tw-space-x-reverse: 0;
      margin-inline-start: calc(calc(var(--spacing) * 2) * var(--tw-space-x-reverse));
      margin-inline-end: calc(calc(var(--spacing) * 2) * calc(1 - var(--tw-space-x-reverse)));
    }
  }
  .accordion {
    &:where(.accordion-bordered) {
      :where(& > :not(:last-child)) {
        --tw-divide-y-reverse: 0;
        border-bottom-style: var(--tw-border-style);
        border-top-style: var(--tw-border-style);
        border-top-width: calc(1px * var(--tw-divide-y-reverse));
        border-bottom-width: calc(1px * calc(1 - var(--tw-divide-y-reverse)));
        border-color: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
        }
      }
      border-radius: var(--radius-box);
      border-style: var(--tw-border-style);
      border-width: 1px;
      border-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
      }
      background-color: var(--color-base-100);
    }
  }
  .truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  .overflow-hidden {
    overflow: hidden;
  }
  .overflow-x-auto {
    overflow-x: auto;
  }
  .overflow-y-auto {
    overflow-y: auto;
  }
  .collapse {
    :where(.menu-horizontal > li:not(.menu-title) > & > ul) {
      border-radius: var(--radius-box);
      background-color: var(--color-base-100);
      --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
      --tw-shadow-color: var(--color-base-300);
      @supports (color: color-mix(in lab, red, red)) {
        --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
      }
    }
  }
  .rounded {
    border-radius: 0.25rem;
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-box {
    border-radius: var(--radius-box);
  }
  .rounded-field {
    border-radius: var(--radius-field);
  }
  .rounded-field {
    border-radius: var(--radius-field);
  }
  .rounded-full {
    border-radius: calc(infinity * 1px);
  }
  .rounded-lg {
    border-radius: var(--radius-lg);
  }
  .rounded-md {
    border-radius: var(--radius-md);
  }
  .rounded-l-md {
    border-top-left-radius: var(--radius-md);
    border-bottom-left-radius: var(--radius-md);
  }
  .rounded-r-md {
    border-top-right-radius: var(--radius-md);
    border-bottom-right-radius: var(--radius-md);
  }
  .border {
    border-style: var(--tw-border-style);
    border-width: 1px;
  }
  .btn-text {
    --btn-shadow: "";
    color: var(--btn-color, var(--color-neutral));
    --btn-bg: "";
    --btn-border: "";
    --btn-noise: none;
    border-width: 0;
    outline-color: var(--btn-color, var(--color-neutral));
    @media (hover: hover) {
      &:hover {
        --btn-bg: var(--btn-color, var(--color-neutral));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
        }
      }
    }
    &:focus-visible {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
      }
    }
    &.btn-active {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
      }
    }
  }
  .btn-soft {
    --btn-shadow: "";
    color: var(--btn-color, var(--color-neutral));
    --btn-bg: var(--btn-color, var(--color-neutral));
    @supports (color: color-mix(in lab, red, red)) {
      --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, var(--color-base-100));
    }
    border-width: 0;
    --btn-noise: none;
    &:focus-visible {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
      }
    }
    @media (hover: hover) {
      &:hover {
        --btn-bg: var(--btn-color, var(--color-neutral));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
        }
      }
    }
    &.btn-active {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 20%, var(--color-base-100));
      }
    }
  }
  .border-b {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 1px;
  }
  .border-b-2 {
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 2px;
  }
  .input {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      border-color: var(--color-success);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-success);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      border-color: var(--color-error);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-error);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
    &.is-valid::file-selector-button {
      background-color: var(--color-success);
      color: var(--color-success-content);
      --input-color: var(--color-success);
    }
    .validate &:valid::file-selector-button {
      background-color: var(--color-success);
      color: var(--color-success-content);
      --input-color: var(--color-success);
    }
    &.is-invalid::file-selector-button {
      background-color: var(--color-error);
      color: var(--color-error-content);
      --input-color: var(--color-error);
    }
    .validate &:invalid::file-selector-button {
      background-color: var(--color-error);
      color: var(--color-error-content);
      --input-color: var(--color-error);
    }
    .input-floating > &.is-valid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    .validate .input-floating > &:valid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    .input-floating > &.is-invalid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
    .validate .input-floating > &:invalid::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
  }
  .input\! {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      border-color: var(--color-success) !important;
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success) !important;
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-success) !important;
      }
      &:focus, &:focus-within {
        --input-color: var(--color-success) !important;
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      border-color: var(--color-error) !important;
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error) !important;
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-error) !important;
      }
      &:focus, &:focus-within {
        --input-color: var(--color-error) !important;
      }
    }
    &.is-valid::file-selector-button {
      background-color: var(--color-success) !important;
      color: var(--color-success-content) !important;
      --input-color: var(--color-success) !important;
    }
    .validate &:valid::file-selector-button {
      background-color: var(--color-success) !important;
      color: var(--color-success-content) !important;
      --input-color: var(--color-success) !important;
    }
    &.is-invalid::file-selector-button {
      background-color: var(--color-error) !important;
      color: var(--color-error-content) !important;
      --input-color: var(--color-error) !important;
    }
    .validate &:invalid::file-selector-button {
      background-color: var(--color-error) !important;
      color: var(--color-error-content) !important;
      --input-color: var(--color-error) !important;
    }
    .input-floating > &.is-valid::file-selector-button {
      background-color: var(--color-base-100) !important;
      color: var(--color-base-content) !important;
      border-inline-end: var(--border) solid var(--color-success) !important;
    }
    .validate .input-floating > &:valid::file-selector-button {
      background-color: var(--color-base-100) !important;
      color: var(--color-base-content) !important;
      border-inline-end: var(--border) solid var(--color-success) !important;
    }
    .input-floating > &.is-invalid::file-selector-button {
      background-color: var(--color-base-100) !important;
      color: var(--color-base-content) !important;
      border-inline-end: var(--border) solid var(--color-error) !important;
    }
    .validate .input-floating > &:invalid::file-selector-button {
      background-color: var(--color-base-100) !important;
      color: var(--color-base-content) !important;
      border-inline-end: var(--border) solid var(--color-error) !important;
    }
  }
  .is-invalid {
    .input&::file-selector-button {
      background-color: var(--color-error);
      color: var(--color-error-content);
      --input-color: var(--color-error);
    }
    .input-floating > .input&::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-error);
    }
    .label-text:has(~ &) {
      color: var(--color-error);
    }
    .label-text:has(~ * &) {
      color: var(--color-error);
    }
    :is(&) ~ .helper-text {
      color: var(--color-error);
    }
    *:has(&) ~ .helper-text {
      color: var(--color-error);
    }
    :is(&) ~ .label-text {
      color: var(--color-error);
    }
    :is(&) ~ .label-text * {
      color: var(--color-error);
    }
    :is(&) ~ * >.label-text {
      color: var(--color-error);
    }
    select& + .advance-select-toggle {
      --input-color: var(--color-error);
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
    .advance-select-tag:has(> &) {
      --input-color: var(--color-error);
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
    .input-floating:has(&) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      .input-floating-label {
        color: var(--color-error);
      }
      &:not(:has(input:-moz-placeholder)) {
        .input-floating-label {
          color: var(--color-error);
        }
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-error);
        }
      }
    }
    .textarea-floating:has(&) {
      .textarea-floating-label {
        color: var(--color-error);
      }
      &:not(:has(textarea:-moz-placeholder)) {
        .textarea-floating-label {
          color: var(--color-error);
        }
      }
      &:focus-within, &:not(:has(textarea:placeholder-shown)), &:has(.textarea:focus) {
        .textarea-floating-label {
          color: var(--color-error);
        }
      }
    }
    .select-floating:has(&) {
      .select-floating-label {
        color: var(--color-error);
      }
      &:not(:has(select:-moz-placeholder)) {
        .select-floating-label {
          color: var(--color-error);
        }
      }
      &:focus-within, &:not(:has(select:placeholder-shown)), &:has(.select:focus) {
        .select-floating-label {
          color: var(--color-error);
        }
      }
    }
  }
  .is-valid {
    .input&::file-selector-button {
      background-color: var(--color-success);
      color: var(--color-success-content);
      --input-color: var(--color-success);
    }
    .input-floating > .input&::file-selector-button {
      background-color: var(--color-base-100);
      color: var(--color-base-content);
      border-inline-end: var(--border) solid var(--color-success);
    }
    .label-text:has(~ &) {
      color: var(--color-success);
    }
    .label-text:has(~ * &) {
      color: var(--color-success);
    }
    :is(&) ~ .helper-text {
      color: var(--color-success);
    }
    *:has(&) ~ .helper-text {
      color: var(--color-success);
    }
    :is(&) ~ .label-text {
      color: var(--color-success);
    }
    :is(&) ~ .label-text * {
      color: var(--color-success);
    }
    :is(&) ~ * >.label-text {
      color: var(--color-success);
    }
    select& + .advance-select-toggle {
      --input-color: var(--color-success);
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    .advance-select-tag:has(> &) {
      --input-color: var(--color-success);
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    .input-floating:has(&) {
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      .input-floating-label {
        color: var(--color-success);
      }
      &:not(:has(input:-moz-placeholder)) {
        .input-floating-label {
          color: var(--color-success);
        }
      }
      &:focus-within, &:not(:has(input:placeholder-shown)), &:has(.input:focus) {
        .input-floating-label {
          color: var(--color-success);
        }
      }
    }
    .textarea-floating:has(&) {
      .textarea-floating-label {
        color: var(--color-success);
      }
      &:not(:has(textarea:-moz-placeholder)) {
        .textarea-floating-label {
          color: var(--color-success);
        }
      }
      &:focus-within, &:not(:has(textarea:placeholder-shown)), &:has(.textarea:focus) {
        .textarea-floating-label {
          color: var(--color-success);
        }
      }
    }
    .select-floating:has(&) {
      .select-floating-label {
        color: var(--color-success);
      }
      &:not(:has(select:-moz-placeholder)) {
        .select-floating-label {
          color: var(--color-success);
        }
      }
      &:focus-within, &:not(:has(select:placeholder-shown)), &:has(.select:focus) {
        .select-floating-label {
          color: var(--color-success);
        }
      }
    }
  }
  .checkbox {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      --input-color: var(--color-success);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      --input-color: var(--color-error);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-error);
      }
    }
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      color: var(--color-success-content);
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      color: var(--color-error-content);
    }
  }
  .select {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      border-color: var(--color-success);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-success);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      border-color: var(--color-error);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-error);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .textarea {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      border-color: var(--color-success);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-success);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-success);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      border-color: var(--color-error);
      &:hover {
        @media (hover: hover) {
          border-color: var(--color-error);
        }
      }
      &:has(:hover):not(:focus, :focus-within) {
        border-color: var(--color-error);
      }
      &:focus, &:focus-within {
        --input-color: var(--color-error);
      }
    }
  }
  .radio {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      --input-color: var(--color-success);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      --input-color: var(--color-error);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-error);
      }
    }
  }
  .switch {
    &.is-valid, &:has(.is-valid), .validate &:valid, .validate &:has(:valid) {
      --input-color: var(--color-success);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-success);
      }
    }
    &.is-invalid, &:has(.is-invalid), .validate &:invalid, .validate &:has(:invalid) {
      --input-color: var(--color-error);
      border-color: var(--input-color);
      &:checked, &[aria-checked="true"], &:has(> input:checked) {
        --input-color: var(--color-error);
      }
    }
  }
  .border-base-content\/20 {
    border-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border-color: color-mix(in oklab, var(--color-base-content) 20%, transparent);
    }
  }
  .border-base-content\/25 {
    border-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border-color: color-mix(in oklab, var(--color-base-content) 25%, transparent);
    }
  }
  .border-base-content\/40 {
    border-color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      border-color: color-mix(in oklab, var(--color-base-content) 40%, transparent);
    }
  }
  .border-gray-200 {
    border-color: var(--color-gray-200);
  }
  .border-gray-300 {
    border-color: var(--color-gray-300);
  }
  .progress-primary {
    background-color: var(--color-primary);
    color: var(--color-primary-content);
  }
  .bg-base-100 {
    background-color: var(--color-base-100);
  }
  .bg-base-200 {
    background-color: var(--color-base-200);
  }
  .bg-base-300\/60 {
    background-color: var(--color-base-300);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-base-300) 60%, transparent);
    }
  }
  .bg-blue-500 {
    background-color: var(--color-blue-500);
  }
  .bg-error {
    background-color: var(--color-error);
  }
  .bg-gray-50 {
    background-color: var(--color-gray-50);
  }
  .bg-gray-100 {
    background-color: var(--color-gray-100);
  }
  .bg-gray-300 {
    background-color: var(--color-gray-300);
  }
  .bg-gray-400 {
    background-color: var(--color-gray-400);
  }
  .bg-gray-600 {
    background-color: var(--color-gray-600);
  }
  .bg-green-500 {
    background-color: var(--color-green-500);
  }
  .bg-info {
    background-color: var(--color-info);
  }
  .bg-primary {
    background-color: var(--color-primary);
  }
  .bg-primary-content {
    background-color: var(--color-primary-content);
  }
  .bg-red-500 {
    background-color: var(--color-red-500);
  }
  .bg-violet-200 {
    background-color: var(--color-violet-200);
  }
  .bg-white {
    background-color: var(--color-white);
  }
  .bg-yellow-500 {
    background-color: var(--color-yellow-500);
  }
  .loading-spinner {
    -webkit-mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
            mask-image: url("data:image/svg+xml,%3Csvg width='24' height='24' stroke='%23000' viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cstyle%3E.spinner_V8m1%7Btransform-origin:center;animation:spinner_zKoa 2s linear infinite%7D.spinner_V8m1 circle%7Bstroke-linecap:round;animation:spinner_YpZS 1.5s ease-out infinite%7D%40keyframes spinner_zKoa%7B100%25%7Btransform:rotate(360deg)%7D%7D%40keyframes spinner_YpZS%7B0%25%7Bstroke-dasharray:0 150;stroke-dashoffset:0%7D47.5%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-16%7D95%25%2C100%25%7Bstroke-dasharray:42 150;stroke-dashoffset:-59%7D%7D%3C%2Fstyle%3E%3Cg class='spinner_V8m1'%3E%3Ccircle cx='12' cy='12' r='9.5' fill='none' stroke-width='3'%3E%3C%2Fcircle%3E%3C%2Fg%3E%3C%2Fsvg%3E");
  }
  .fill-black {
    fill: var(--color-black);
  }
  .object-cover {
    -o-object-fit: cover;
       object-fit: cover;
  }
  .p-0\.5 {
    padding: calc(var(--spacing) * 0.5);
  }
  .p-1 {
    padding: calc(var(--spacing) * 1);
  }
  .p-3 {
    padding: calc(var(--spacing) * 3);
  }
  .p-4 {
    padding: calc(var(--spacing) * 4);
  }
  .p-5 {
    padding: calc(var(--spacing) * 5);
  }
  .p-6 {
    padding: calc(var(--spacing) * 6);
  }
  .px-2 {
    padding-inline: calc(var(--spacing) * 2);
  }
  .px-3 {
    padding-inline: calc(var(--spacing) * 3);
  }
  .px-4 {
    padding-inline: calc(var(--spacing) * 4);
  }
  .px-5 {
    padding-inline: calc(var(--spacing) * 5);
  }
  .px-6 {
    padding-inline: calc(var(--spacing) * 6);
  }
  .py-1 {
    padding-block: calc(var(--spacing) * 1);
  }
  .py-2 {
    padding-block: calc(var(--spacing) * 2);
  }
  .py-3 {
    padding-block: calc(var(--spacing) * 3);
  }
  .py-4 {
    padding-block: calc(var(--spacing) * 4);
  }
  .py-5 {
    padding-block: calc(var(--spacing) * 5);
  }
  .ps-3 {
    padding-inline-start: calc(var(--spacing) * 3);
  }
  .pe-2 {
    padding-inline-end: calc(var(--spacing) * 2);
  }
  .pt-2 {
    padding-top: calc(var(--spacing) * 2);
  }
  .pt-3 {
    padding-top: calc(var(--spacing) * 3);
  }
  .pt-4 {
    padding-top: calc(var(--spacing) * 4);
  }
  .pb-2 {
    padding-bottom: calc(var(--spacing) * 2);
  }
  .pb-8 {
    padding-bottom: calc(var(--spacing) * 8);
  }
  .text-center {
    text-align: center;
  }
  .text-left {
    text-align: left;
  }
  .text-start {
    text-align: start;
  }
  .align-bottom {
    vertical-align: bottom;
  }
  .card-title {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
    color: var(--color-base-content);
  }
  .modal-title {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
    color: var(--color-base-content);
  }
  .btn-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
    --btn-p: 0.75rem;
    --size: calc(var(--size-field, 0.25rem) * 7.5);
  }
  .btn-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
    --btn-p: 0.5rem;
    --size: calc(var(--size-field, 0.25rem) * 6);
  }
  .text-2xl {
    font-size: var(--text-2xl);
    line-height: var(--tw-leading, var(--text-2xl--line-height));
  }
  .text-3xl {
    font-size: var(--text-3xl);
    line-height: var(--tw-leading, var(--text-3xl--line-height));
  }
  .text-base {
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
  }
  .text-lg {
    font-size: var(--text-lg);
    line-height: var(--tw-leading, var(--text-lg--line-height));
  }
  .text-sm {
    font-size: var(--text-sm);
    line-height: var(--tw-leading, var(--text-sm--line-height));
  }
  .text-xl {
    font-size: var(--text-xl);
    line-height: var(--tw-leading, var(--text-xl--line-height));
  }
  .text-xs {
    font-size: var(--text-xs);
    line-height: var(--tw-leading, var(--text-xs--line-height));
  }
  .leading-5 {
    --tw-leading: calc(var(--spacing) * 5);
    line-height: calc(var(--spacing) * 5);
  }
  .leading-normal {
    --tw-leading: var(--leading-normal);
    line-height: var(--leading-normal);
  }
  .leading-tight {
    --tw-leading: var(--leading-tight);
    line-height: var(--leading-tight);
  }
  .font-bold {
    --tw-font-weight: var(--font-weight-bold);
    font-weight: var(--font-weight-bold);
  }
  .font-medium {
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
  }
  .font-semibold {
    --tw-font-weight: var(--font-weight-semibold);
    font-weight: var(--font-weight-semibold);
  }
  .tracking-wider {
    --tw-tracking: var(--tracking-wider);
    letter-spacing: var(--tracking-wider);
  }
  .whitespace-nowrap {
    white-space: nowrap;
  }
  .btn-outline {
    --btn-shadow: "";
    --btn-bg: "";
    color: var(--btn-color, var(--color-neutral));
    --btn-border: var(--btn-color, var(--color-neutral));
    --btn-noise: none;
    outline-color: var(--btn-color, var(--color-neutral));
    @media (hover: hover) {
      &:hover {
        --btn-bg: var(--btn-color, var(--color-neutral));
        @supports (color: color-mix(in lab, red, red)) {
          --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
        }
      }
    }
    &:focus-visible {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
      }
      outline-width: 1px;
    }
    &.btn-active {
      --btn-bg: var(--btn-color, var(--color-neutral));
      @supports (color: color-mix(in lab, red, red)) {
        --btn-bg: color-mix(in oklab, var(--btn-color, var(--color-neutral)) 10%, #0000);
      }
    }
  }
  .label-text {
    &:has(~ .is-valid) {
      color: var(--color-success);
    }
    &:has(~ * .is-valid) {
      color: var(--color-success);
    }
    .validate &:has(~ :valid) {
      color: var(--color-success);
    }
    .validate &:has(~ * :valid) {
      color: var(--color-success);
    }
    :is(.is-valid) ~ & {
      color: var(--color-success);
    }
    :is(.is-valid) ~ & * {
      color: var(--color-success);
    }
    :is(.is-valid) ~ * >& {
      color: var(--color-success);
    }
    .validate :is(:valid) ~ & {
      color: var(--color-success);
    }
    .validate :is(:valid) ~ & * {
      color: var(--color-success);
    }
    .validate :is(:valid) ~ * >& {
      color: var(--color-success);
    }
    &:has(~ .is-invalid) {
      color: var(--color-error);
    }
    &:has(~ * .is-invalid) {
      color: var(--color-error);
    }
    .validate &:has(~ :invalid) {
      color: var(--color-error);
    }
    .validate &:has(~ * :invalid) {
      color: var(--color-error);
    }
    :is(.is-invalid) ~ & {
      color: var(--color-error);
    }
    :is(.is-invalid) ~ & * {
      color: var(--color-error);
    }
    :is(.is-invalid) ~ * >& {
      color: var(--color-error);
    }
    .validate :is(:invalid) ~ & {
      color: var(--color-error);
    }
    .validate :is(:invalid) ~ & * {
      color: var(--color-error);
    }
    .validate :is(:invalid) ~ * >& {
      color: var(--color-error);
    }
  }
  .alert-error {
    color: var(--color-error-content);
    --alert-color: var(--color-error);
  }
  .text-base-content {
    color: var(--color-base-content);
  }
  .text-base-content\/50 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  .text-base-content\/80 {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
    }
  }
  .text-blue-500 {
    color: var(--color-blue-500);
  }
  .text-gray-500 {
    color: var(--color-gray-500);
  }
  .text-gray-600 {
    color: var(--color-gray-600);
  }
  .text-gray-700 {
    color: var(--color-gray-700);
  }
  .text-gray-800 {
    color: var(--color-gray-800);
  }
  .text-gray-900 {
    color: var(--color-gray-900);
  }
  .text-primary {
    color: var(--color-primary);
  }
  .text-primary-content {
    color: var(--color-primary-content);
  }
  .text-red-500 {
    color: var(--color-red-500);
  }
  .text-white {
    color: var(--color-white);
  }
  .capitalize {
    text-transform: capitalize;
  }
  .lowercase {
    text-transform: lowercase;
  }
  .uppercase {
    text-transform: uppercase;
  }
  .italic {
    font-style: italic;
  }
  .ordinal {
    --tw-ordinal: ordinal;
    font-variant-numeric: var(--tw-ordinal,) var(--tw-slashed-zero,) var(--tw-numeric-figure,) var(--tw-numeric-spacing,) var(--tw-numeric-fraction,);
  }
  .no-underline {
    text-decoration-line: none;
  }
  .opacity-0 {
    opacity: 0%;
  }
  .shadow-xl\/20 {
    --tw-shadow-alpha: 20%;
    --tw-shadow: 0 20px 25px -5px var(--tw-shadow-color, oklab(from rgb(0 0 0 / 0.1) l a b / 20%)), 0 8px 10px -6px var(--tw-shadow-color, oklab(from rgb(0 0 0 / 0.1) l a b / 20%));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-lg {
    --tw-shadow: 0 10px 15px -3px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 4px 6px -4px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-md {
    --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-sm {
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  .shadow-base-300\/20 {
    --tw-shadow-color: var(--color-base-300);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  .ring-gray-300 {
    --tw-ring-color: var(--color-gray-300);
  }
  .outline {
    outline-style: var(--tw-outline-style);
    outline-width: 1px;
  }
  .blur {
    --tw-blur: blur(8px);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .invert {
    --tw-invert: invert(100%);
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .\!filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,) !important;
  }
  .filter {
    filter: var(--tw-blur,) var(--tw-brightness,) var(--tw-contrast,) var(--tw-grayscale,) var(--tw-hue-rotate,) var(--tw-invert,) var(--tw-saturate,) var(--tw-sepia,) var(--tw-drop-shadow,);
  }
  .carousel-slide {
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
    transition-duration: 700ms;
    --tw-duration: 700ms;
  }
  .transition {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter, display, visibility, content-visibility, overlay, pointer-events;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-\[height\] {
    transition-property: height;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-all {
    transition-property: all;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .transition-transform {
    transition-property: transform, translate, scale, rotate;
    transition-timing-function: var(--tw-ease, var(--default-transition-timing-function));
    transition-duration: var(--tw-duration, var(--default-transition-duration));
  }
  .duration-150 {
    --tw-duration: 150ms;
    transition-duration: 150ms;
  }
  .duration-300 {
    --tw-duration: 300ms;
    transition-duration: 300ms;
  }
  .duration-500 {
    --tw-duration: 500ms;
    transition-duration: 500ms;
  }
  .ease-in-out {
    --tw-ease: var(--ease-in-out);
    transition-timing-function: var(--ease-in-out);
  }
  .btn-error {
    --btn-color: var(--color-error);
    --btn-fg: var(--color-error-content);
  }
  .btn-primary {
    --btn-color: var(--color-primary);
    --btn-fg: var(--color-primary-content);
  }
  .btn-success {
    --btn-color: var(--color-success);
    --btn-fg: var(--color-success-content);
  }
  .selected {
    .validate select:has(~ * > &) + .advance-select-toggle {
      --input-color: var(--color-success);
      &:focus, &:focus-within {
        --input-color: var(--color-success);
      }
    }
  }
  .\[--auto-close\:inside\] {
    --auto-close: inside;
  }
  .\[--offset\:8\] {
    --offset: 8;
  }
  .\[--placement\:bottom\] {
    --placement: bottom;
  }
  .\[wire\:model\] {
    wire: model;
  }
  .link-primary {
    --link-color: var(--color-primary);
  }
  .marker\:text-purple-500 {
    & *::marker {
      color: var(--color-purple-500);
    }
    &::marker {
      color: var(--color-purple-500);
    }
    & *::-webkit-details-marker {
      color: var(--color-purple-500);
    }
    &::-webkit-details-marker {
      color: var(--color-purple-500);
    }
  }
  .file\:mr-4 {
    &::file-selector-button {
      margin-right: calc(var(--spacing) * 4);
    }
  }
  .file\:rounded-full {
    &::file-selector-button {
      border-radius: calc(infinity * 1px);
    }
  }
  .file\:border-0 {
    &::file-selector-button {
      border-style: var(--tw-border-style);
      border-width: 0px;
    }
  }
  .file\:bg-blue-50 {
    &::file-selector-button {
      background-color: var(--color-blue-50);
    }
  }
  .file\:px-4 {
    &::file-selector-button {
      padding-inline: calc(var(--spacing) * 4);
    }
  }
  .file\:py-2 {
    &::file-selector-button {
      padding-block: calc(var(--spacing) * 2);
    }
  }
  .file\:text-sm {
    &::file-selector-button {
      font-size: var(--text-sm);
      line-height: var(--tw-leading, var(--text-sm--line-height));
    }
  }
  .file\:font-semibold {
    &::file-selector-button {
      --tw-font-weight: var(--font-weight-semibold);
      font-weight: var(--font-weight-semibold);
    }
  }
  .file\:text-blue-700 {
    &::file-selector-button {
      color: var(--color-blue-700);
    }
  }
  .hover\:bg-blue-700 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-blue-700);
      }
    }
  }
  .hover\:bg-gray-50 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-gray-50);
      }
    }
  }
  .hover\:bg-gray-100 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-gray-100);
      }
    }
  }
  .hover\:bg-gray-400 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-gray-400);
      }
    }
  }
  .hover\:bg-green-700 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-green-700);
      }
    }
  }
  .hover\:bg-red-700 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-red-700);
      }
    }
  }
  .hover\:bg-yellow-700 {
    &:hover {
      @media (hover: hover) {
        background-color: var(--color-yellow-700);
      }
    }
  }
  .hover\:text-gray-400 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-gray-400);
      }
    }
  }
  .hover\:text-gray-500 {
    &:hover {
      @media (hover: hover) {
        color: var(--color-gray-500);
      }
    }
  }
  .hover\:underline {
    &:hover {
      @media (hover: hover) {
        text-decoration-line: underline;
      }
    }
  }
  .hover\:file\:bg-blue-100 {
    &:hover {
      @media (hover: hover) {
        &::file-selector-button {
          background-color: var(--color-blue-100);
        }
      }
    }
  }
  .focus\:z-10 {
    &:focus {
      z-index: 10;
    }
  }
  .focus\:border-blue-300 {
    &:focus {
      border-color: var(--color-blue-300);
    }
  }
  .focus\:border-primary {
    &:focus {
      border-color: var(--color-primary);
    }
  }
  .focus\:ring {
    &:focus {
      --tw-ring-shadow: var(--tw-ring-inset,) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color, currentcolor);
      box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    }
  }
  .focus\:outline-1 {
    &:focus {
      outline-style: var(--tw-outline-style);
      outline-width: 1px;
    }
  }
  .focus\:outline-primary {
    &:focus {
      outline-color: var(--color-primary);
    }
  }
  .focus\:outline-none {
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
    }
  }
  .active\:bg-gray-100 {
    &:active {
      background-color: var(--color-gray-100);
    }
  }
  .active\:text-gray-500 {
    &:active {
      color: var(--color-gray-500);
    }
  }
  .active\:text-gray-700 {
    &:active {
      color: var(--color-gray-700);
    }
  }
  .max-md\:mt-2 {
    @media (width < 48rem) {
      margin-top: calc(var(--spacing) * 2);
    }
  }
  .max-md\:w-full {
    @media (width < 48rem) {
      width: 100%;
    }
  }
  .max-md\:px-2 {
    @media (width < 48rem) {
      padding-inline: calc(var(--spacing) * 2);
    }
  }
  .sm\:flex {
    @media (width >= 40rem) {
      display: flex;
    }
  }
  .sm\:hidden {
    @media (width >= 40rem) {
      display: none;
    }
  }
  .sm\:max-w-sm {
    @media (width >= 40rem) {
      max-width: var(--container-sm);
    }
  }
  .sm\:flex-1 {
    @media (width >= 40rem) {
      flex: 1;
    }
  }
  .sm\:items-center {
    @media (width >= 40rem) {
      align-items: center;
    }
  }
  .sm\:justify-between {
    @media (width >= 40rem) {
      justify-content: space-between;
    }
  }
  .md\:navbar-end {
    @media (width >= 48rem) {
      display: flex;
      width: calc(1/2 * 100%);
      justify-content: flex-end;
    }
  }
  .md\:navbar-start {
    @media (width >= 48rem) {
      display: flex;
      width: calc(1/2 * 100%);
      justify-content: flex-start;
    }
  }
  .md\:flex {
    @media (width >= 48rem) {
      display: flex;
    }
  }
  .md\:items-center {
    @media (width >= 48rem) {
      align-items: center;
    }
  }
  .md\:gap-2 {
    @media (width >= 48rem) {
      gap: calc(var(--spacing) * 2);
    }
  }
  .md\:justify-self-end {
    @media (width >= 48rem) {
      justify-self: flex-end;
    }
  }
  .md\:\[--placement\:bottom-end\] {
    @media (width >= 48rem) {
      --placement: bottom-end;
    }
  }
  .dropdown-open\:rotate-180 {
    &.dropdown-menu.open {
      rotate: 180deg;
    }
    .dropdown.open > & {
      rotate: 180deg;
    }
    .dropdown.open > .dropdown-toggle & {
      rotate: 180deg;
    }
    .dropdown.open > .dropdown-menu > & {
      rotate: 180deg;
    }
  }
  .dropdown-open\:bg-base-content\/10 {
    &.dropdown-menu.open {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    .dropdown.open > & {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    .dropdown.open > .dropdown-toggle & {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    .dropdown.open > .dropdown-menu > & {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
  }
  .dropdown-open\:text-base-content {
    &.dropdown-menu.open {
      color: var(--color-base-content);
    }
    .dropdown.open > & {
      color: var(--color-base-content);
    }
    .dropdown.open > .dropdown-toggle & {
      color: var(--color-base-content);
    }
    .dropdown.open > .dropdown-menu > & {
      color: var(--color-base-content);
    }
  }
  .dropdown-open\:opacity-100 {
    &.dropdown-menu.open {
      opacity: 100%;
    }
    .dropdown.open > & {
      opacity: 100%;
    }
    .dropdown.open > .dropdown-toggle & {
      opacity: 100%;
    }
    .dropdown.open > .dropdown-menu > & {
      opacity: 100%;
    }
  }
  .collapse-open\:rotate-180 {
    &.collapse.open {
      rotate: 180deg;
    }
    &.collapse-toggle.open {
      rotate: 180deg;
    }
    .collapse.open > & {
      rotate: 180deg;
    }
    .collapse-toggle.open > & {
      rotate: 180deg;
    }
  }
  .collapse-open\:bg-base-content\/10 {
    &.collapse.open {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    &.collapse-toggle.open {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    .collapse.open > & {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
    .collapse-toggle.open > & {
      background-color: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
      }
    }
  }
  .collapse-open\:text-base-content {
    &.collapse.open {
      color: var(--color-base-content);
    }
    &.collapse-toggle.open {
      color: var(--color-base-content);
    }
    .collapse.open > & {
      color: var(--color-base-content);
    }
    .collapse-toggle.open > & {
      color: var(--color-base-content);
    }
  }
  .overlay-open\:opacity-100 {
    &.open {
      opacity: 100%;
    }
    .open & {
      opacity: 100%;
    }
  }
  .overlay-open\:duration-300 {
    &.open {
      --tw-duration: 300ms;
      transition-duration: 300ms;
    }
    .open & {
      --tw-duration: 300ms;
      transition-duration: 300ms;
    }
  }
  .combo-box-selected\:block {
    &.selected {
      display: block;
    }
    .selected & {
      display: block;
    }
  }
  .combo-box-selected\:dropdown-active {
    &.selected {
      background-color: var(--color-primary);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
      }
      color: var(--color-primary);
    }
    .selected & {
      background-color: var(--color-primary);
      @supports (color: color-mix(in lab, red, red)) {
        background-color: color-mix(in oklab, var(--color-primary) 10%, transparent);
      }
      color: var(--color-primary);
    }
  }
  .file-upload-complete\:progress-success {
    &.complete {
      background-color: var(--color-success);
      color: var(--color-success-content);
    }
    .complete & {
      background-color: var(--color-success);
      color: var(--color-success-content);
    }
  }
}
.flatpickr-calendar {
  visibility: hidden;
  position: absolute;
  display: flex;
  max-width: calc(var(--spacing) * 72);
  touch-action: manipulation;
  flex-direction: row;
  gap: calc(var(--spacing) * 1.5);
  overflow: hidden;
  border-radius: var(--radius-box);
  border-radius: var(--radius-box);
  border-color: transparent;
  background-color: var(--color-base-100);
  --tw-shadow: 0 4px 6px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 2px 4px -2px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
  box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  --tw-shadow-color: var(--color-base-300);
  @supports (color: color-mix(in lab, red, red)) {
    --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
  }
  &.hasWeeks {
    max-width: 21rem;
  }
  &::after, &::before {
    content: none;
  }
}
.flatpickr-current-month {
  position: absolute;
  inset-inline-start: calc(var(--spacing) * 4);
  display: flex;
  width: auto;
  align-items: center;
  justify-content: center;
  gap: calc(var(--spacing) * 1);
  padding-top: calc(var(--spacing) * 0);
  font-size: var(--text-base);
  line-height: var(--tw-leading, var(--text-base--line-height));
  --tw-font-weight: var(--font-weight-medium);
  font-weight: var(--font-weight-medium);
  color: var(--color-base-content);
  &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    inset-inline-start: auto;
  }
  &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
    inset-inline-end: calc(var(--spacing) * 4);
  }
  .flatpickr-monthDropdown-months, input.cur-year {
    display: flex;
    cursor: pointer;
    align-items: center;
    justify-content: center;
    border-radius: 0;
    border-style: var(--tw-border-style);
    border-width: 0px;
    vertical-align: middle;
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    --tw-outline-style: none;
    outline-style: none;
    font-size: inherit;
    font-family: inherit;
    line-height: inherit;
    color: inherit;
  }
  span.cur-month {
    margin: calc(var(--spacing) * 0);
    --tw-font-weight: var(--font-weight-medium);
    font-weight: var(--font-weight-medium);
    &:hover {
      @media (hover: hover) {
        background-color: transparent;
      }
    }
  }
  .numInputWrapper {
    display: inline-block;
    width: 6ch;
    &:hover {
      @media (hover: hover) {
        background-color: transparent;
      }
    }
  }
  .flatpickr-monthDropdown-months {
    position: relative;
    margin-top: -1px;
    cursor: pointer;
    background-color: var(--color-base-100) !important;
    padding: calc(var(--spacing) * 0);
  }
  input.cur-year {
    margin: calc(var(--spacing) * 0);
    height: calc(var(--spacing) * 5);
    cursor: default;
    padding-inline-start: calc(var(--spacing) * 1);
    &:focus {
      --tw-outline-style: none;
      outline-style: none;
    }
    &[disabled], &[disabled]:hover {
      pointer-events: none;
      background-color: transparent;
    }
  }
}
.flatpickr-months {
  .flatpickr-month {
    position: relative;
    display: flex;
    height: calc(var(--spacing) * 15);
    align-items: center;
    overflow: hidden;
    border-top-left-radius: var(--radius-box);
    border-top-right-radius: var(--radius-box);
    border-top-left-radius: var(--radius-box);
    border-top-right-radius: var(--radius-box);
    padding-inline: calc(var(--spacing) * 4);
    text-align: center;
    -webkit-user-select: none;
    -moz-user-select: none;
         user-select: none;
  }
  .flatpickr-prev-month, .flatpickr-next-month {
    position: absolute;
    top: calc(var(--spacing) * 4);
    display: flex;
    width: calc(var(--spacing) * 7);
    height: calc(var(--spacing) * 7);
    align-items: center;
    justify-content: center;
    border-radius: calc(infinity * 1px);
    background-color: var(--color-neutral);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
    padding: calc(var(--spacing) * 0);
    color: var(--color-base-content);
    text-decoration-line: none;
    &:hover {
      @media (hover: hover) {
        fill: var(--color-base-content);
        @supports (color: color-mix(in lab, red, red)) {
          fill: color-mix(in oklab, var(--color-base-content) 90%, transparent);
        }
      }
    }
    &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
      rotate: 180deg;
    }
    svg {
      width: calc(var(--spacing) * 3);
      height: calc(var(--spacing) * 3);
      fill: var(--color-base-content);
      @supports (color: color-mix(in lab, red, red)) {
        fill: color-mix(in oklab, var(--color-base-content) 90%, transparent);
      }
      vertical-align: middle;
      color: var(--color-base-content);
    }
  }
  .flatpickr-prev-month:hover svg, .flatpickr-next-month:hover svg {
    fill: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      fill: color-mix(in oklab, var(--color-base-content) 90%, transparent);
    }
  }
  .flatpickr-prev-month {
    &.flatpickr-prev-month {
      inset-inline-start: auto;
      inset-inline-end: 50px;
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        inset-inline-start: calc(var(--spacing) * 14);
      }
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        inset-inline-end: auto;
      }
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        --tw-skew-x: skewX(calc(1deg * -1));
        transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
      }
    }
  }
  .flatpickr-next-month {
    &.flatpickr-prev-month {
      inset-inline-start: calc(var(--spacing) * 0);
      inset-inline-end: calc(var(--spacing) * 0);
    }
    &.flatpickr-next-month {
      inset-inline-end: calc(var(--spacing) * 4);
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        inset-inline-start: calc(var(--spacing) * 4);
      }
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        inset-inline-end: auto;
      }
      &:where(:dir(rtl), [dir="rtl"], [dir="rtl"] *) {
        --tw-skew-x: skewX(calc(1deg * -1));
        transform: var(--tw-rotate-x,) var(--tw-rotate-y,) var(--tw-rotate-z,) var(--tw-skew-x,) var(--tw-skew-y,);
      }
    }
  }
}
.flatpickr-weekdays {
  display: flex;
  width: 100%;
  align-items: center;
  overflow: hidden;
  padding-inline: calc(var(--spacing) * 3);
  text-align: center;
}
.flatpickr-weekdaycontainer {
  display: flex;
  width: 100%;
}
span.flatpickr-weekday, .flatpickr-weekwrapper .flatpickr-weekday {
  margin: calc(var(--spacing) * 0);
  display: block;
  cursor: default;
  text-align: center;
  font-size: var(--text-sm);
  line-height: var(--tw-leading, var(--text-sm--line-height));
  --tw-font-weight: var(--font-weight-medium);
  font-weight: var(--font-weight-medium);
  color: var(--color-base-content);
}
.flatpickr-days {
  position: relative;
  display: flex;
  width: 100%;
  max-width: calc(var(--spacing) * 72);
  flex-wrap: wrap;
  overflow: hidden;
  padding-inline: calc(var(--spacing) * 2.5);
  padding-block: calc(var(--spacing) * 2);
  &:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
  .flatpickr-calendar.hasTime & {
    border-bottom-right-radius: 0;
    border-bottom-left-radius: 0;
    border-bottom-style: var(--tw-border-style);
    border-bottom-width: 0px;
  }
  & .dayContainer {
    display: flex;
    max-width: 100%;
    min-width: 100%;
    flex-wrap: wrap;
    justify-content: center;
    row-gap: calc(var(--spacing) * 0.5);
    padding: calc(var(--spacing) * 0);
    opacity: 100%;
    --tw-outline-style: none;
    outline-style: none;
  }
}
.flatpickr-day {
  position: relative;
  margin: calc(var(--spacing) * 0);
  display: flex;
  width: calc(var(--spacing) * 9.5);
  height: calc(var(--spacing) * 9.5);
  max-width: calc(var(--spacing) * 9.5);
  cursor: pointer;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: var(--text-base);
  line-height: var(--tw-leading, var(--text-base--line-height));
  color: var(--color-base-content);
  &.today:not(.selected) {
    border-color: transparent;
    background-color: var(--color-primary);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-primary) 20%, transparent);
    }
    color: var(--color-primary);
  }
  &.inRange, &.prevMonthDay.inRange, &.nextMonthDay.inRange, &.today.inRange, &.prevMonthDay.today.inRange, &.nextMonthDay.today.inRange, &:hover, &.prevMonthDay:hover, &.nextMonthDay:hover, &:focus, &.prevMonthDay:focus, &.nextMonthDay:focus {
    cursor: pointer;
    --tw-outline-style: none;
    outline-style: none;
  }
  &:hover:not(.selected, .today), &:focus:not(.selected, .today), &.prevMonthDay:hover:not(.selected, .today), &.nextMonthDay:hover:not(.selected, .today), &.prevMonthDay:focus:not(.selected, .today), &.nextMonthDay:focus:not(.selected, .today) {
    border-color: transparent;
    background-color: var(--color-neutral);
    @supports (color: color-mix(in lab, red, red)) {
      background-color: color-mix(in oklab, var(--color-neutral) 10%, transparent);
    }
  }
  &.selected, &.startRange, &.endRange, &.selected.inRange, &.startRange.inRange, &.endRange.inRange, &.selected:focus, &.startRange:focus, &.endRange:focus, &.selected:hover, &.startRange:hover, &.endRange:hover, &.selected.prevMonthDay, &.startRange.prevMonthDay, &.endRange.prevMonthDay, &.selected.nextMonthDay, &.startRange.nextMonthDay, &.endRange.nextMonthDay {
    border-color: transparent;
    background-color: var(--color-primary);
    color: var(--color-primary-content);
    --tw-shadow: 0 1px 3px 0 var(--tw-shadow-color, rgb(0 0 0 / 0.1)), 0 1px 2px -1px var(--tw-shadow-color, rgb(0 0 0 / 0.1));
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
    --tw-shadow-color: var(--color-base-300);
    @supports (color: color-mix(in lab, red, red)) {
      --tw-shadow-color: color-mix(in oklab, color-mix(in oklab, var(--color-base-300) 20%, transparent) var(--tw-shadow-alpha), transparent);
    }
  }
  &.inRange:not(.startRange):not(.endRange) {
    border-radius: 0;
    border-color: transparent;
  }
  z &.disabled, &.disabled:hover {
    pointer-events: none;
    border-color: transparent;
    background-color: transparent;
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
  &.prevMonthDay, &.nextMonthDay, &.notAllowed, &.notAllowed.prevMonthDay, &.notAllowed.nextMonthDay {
    border-color: transparent;
    background-color: transparent;
  }
  &.week.selected {
    border-radius: 0;
  }
  &.selected.startRange, &.startRange.startRange, &.endRange.startRange {
    border-start-end-radius: 0;
    border-end-end-radius: 0;
  }
  &.selected.endRange, &.startRange.endRange, &.endRange.endRange {
    border-start-start-radius: 0;
    border-end-start-radius: 0;
  }
  &.flatpickr-disabled, &.flatpickr-disabled:hover, &.prevMonthDay, &.nextMonthDay, &.notAllowed, &.notAllowed.prevMonthDay, &.notAllowed.nextMonthDay {
    color: var(--color-base-content);
    @supports (color: color-mix(in lab, red, red)) {
      color: color-mix(in oklab, var(--color-base-content) 50%, transparent);
    }
  }
}
.flatpickr-day.inRange, .flatpickr-day.inRange:hover {
  background-color: var(--color-primary);
  @supports (color: color-mix(in lab, red, red)) {
    background-color: color-mix(in oklab, var(--color-primary) 20%, transparent);
  }
  color: var(--color-primary);
  box-shadow: unset;
}
.flatpickr-day.selected.startRange + .endRange:not(:nth-child(7n + 1)), .flatpickr-day.startRange.startRange + .endRange:not(:nth-child(7n + 1)), .flatpickr-day.endRange.startRange + .endRange:not(:nth-child(7n + 1)) {
  box-shadow: unset;
}
.flatpickr-weekwrapper {
  & span.flatpickr-day, & span.flatpickr-day:hover {
    margin: calc(var(--spacing) * 0);
    display: flex;
    width: calc(var(--spacing) * 9.5);
    height: calc(var(--spacing) * 9.5);
    max-width: calc(var(--spacing) * 9.5);
    cursor: pointer;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: var(--text-base);
    line-height: var(--tw-leading, var(--text-base--line-height));
    color: var(--color-base-content);
    &:not(:last-child) {
      margin-bottom: calc(var(--spacing) * 0.5);
    }
  }
  & .flatpickr-weeks {
    padding-block: calc(var(--spacing) * 2);
    padding-inline-start: calc(var(--spacing) * 2.5);
    padding-inline-end: calc(var(--spacing) * 0);
    --tw-shadow: 0 0 #0000;
    box-shadow: var(--tw-inset-shadow), var(--tw-inset-ring-shadow), var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow);
  }
  & .flatpickr-weekday {
    padding-inline-start: calc(var(--spacing) * 3);
    line-height: 28px;
  }
}
.flatpickr-calendar .flatpickr-innerContainer:has(> .flatpickr-weekwrapper) {
  & > .flatpickr-rContainer .flatpickr-weekdays, & > .flatpickr-rContainer .flatpickr-days {
    padding-inline-start: calc(var(--spacing) * 0);
  }
}
.flatpickr-calendar.hasTime .flatpickr-time {
  height: 100%;
  border-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  }
  padding-inline: calc(var(--spacing) * 4.5);
  padding-block: calc(var(--spacing) * 3);
}
.flatpickr-time {
  max-height: unset;
  gap: calc(var(--spacing) * 2);
  --tw-leading: 30px;
  line-height: 30px;
  & .numInputWrapper {
    border-radius: var(--radius-field);
    border-radius: var(--radius-field);
    height: inherit;
  }
  & input:hover, & .flatpickr-am-pm:hover, & input:focus, & .flatpickr-am-pm:focus {
    background: unset;
  }
  & .numInputWrapper span.arrowUp {
    top: 10%;
  }
  & .flatpickr-time-separator {
    color: var(--color-base-content);
  }
}
.flatpickr-time:after {
  content: none;
}
.flatpickr-calendar.hasTime.noCalendar > .flatpickr-time {
  border-color: transparent;
}
.flatpickr-time input.flatpickr-hour {
  height: auto;
  border-radius: var(--radius-field);
  border-radius: var(--radius-field);
  border-style: var(--tw-border-style);
  border-width: 1px;
  --tw-border-style: solid;
  border-style: solid;
  border-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  }
  font-size: var(--text-base);
  line-height: var(--tw-leading, var(--text-base--line-height));
  --tw-leading: inherit;
  line-height: inherit;
  --tw-font-weight: var(--font-weight-normal);
  font-weight: var(--font-weight-normal);
  color: var(--color-base-content);
}
.flatpickr-time input.flatpickr-minute {
  height: auto;
  border-radius: var(--radius-field);
  border-radius: var(--radius-field);
  border-style: var(--tw-border-style);
  border-width: 1px;
  --tw-border-style: solid;
  border-style: solid;
  border-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  }
  font-size: var(--text-base);
  line-height: var(--tw-leading, var(--text-base--line-height));
  --tw-leading: inherit;
  line-height: inherit;
  color: var(--color-base-content);
}
.flatpickr-time .flatpickr-am-pm {
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--radius-field);
  border-radius: var(--radius-field);
  border-style: var(--tw-border-style);
  border-width: 1px;
  border-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    border-color: color-mix(in oklab, var(--color-base-content) 10%, transparent);
  }
  font-size: var(--text-base);
  line-height: var(--tw-leading, var(--text-base--line-height));
  --tw-leading: inherit;
  line-height: inherit;
  color: var(--color-base-content);
}
.numInputWrapper:hover, .numInputWrapper span:hover {
  background: unset;
}
.flatpickr-current-month .numInputWrapper span.arrowUp:after, .flatpickr-time .numInputWrapper span.arrowUp:after {
  border-bottom-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    border-bottom-color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
  }
}
.flatpickr-current-month .numInputWrapper span.arrowDown:after, .flatpickr-time .numInputWrapper span.arrowDown:after {
  border-top-color: var(--color-base-content);
  @supports (color: color-mix(in lab, red, red)) {
    border-top-color: color-mix(in oklab, var(--color-base-content) 80%, transparent);
  }
}
.numInputWrapper span {
  border-style: var(--tw-border-style);
  border-width: 0px;
}
.flatpickr-calendar:not(.inline):not(.open) {
  display: none;
}
body {
  background-image: url('/images/fondo.png');
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}
.enlace-registro {
  color: darkgrey;
  font-size: 10px;
}
@layer base {
  :where(:root),:root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97.8% 0.005 297.73);
    --color-base-300: oklch(37.01% 0.0069 297.49);
    --color-base-content: oklch(37.57% 0.022 281.8);
    --color-primary: oklch(57.59% 0.247 287.24);
    --color-primary-content: oklch(96.57% 0.017 289.61);
    --color-secondary: oklch(55.79% 0.022 301.91);
    --color-secondary-content: oklch(97.64% 0.001 286.38);
    --color-accent: oklch(62.31% 0.188 259.81);
    --color-accent-content: oklch(97.05% 0.014 254.6);
    --color-neutral: oklch(37.57% 0.0222 281.8);
    --color-neutral-content: oklch(0.98 0.0013 286.38);
    --color-info: oklch(71.48% 0.126 215.22);
    --color-info-content: oklch(98.41% 0.019 200.87);
    --color-success: oklch(73.11% 0.217 147.04);
    --color-success-content: oklch(98.1% 0.014 174.18);
    --color-warning: oklch(79.87% 0.164 73.09);
    --color-warning-content: oklch(99.34% 0.011 95.16);
    --color-error: oklch(65.39% 0.222 25.86);
    --color-error-content: oklch(98.76% 0.009 67.73);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  @media (prefers-color-scheme: dark) {
    :root {
      color-scheme: dark;
      --color-base-100: oklch(31.23% 0.026 301.24);
      --color-base-200: oklch(25.39% 0.025 298.72);
      --color-base-300: oklch(23.44% 0.0194 298.63);
      --color-base-content: oklch(84.98% 0.014 295.28);
      --color-primary: oklch(53.93% 0.271 286.75);
      --color-primary-content: oklch(88.22% 0.062 290.17);
      --color-secondary: oklch(49.12% 0.021 303.05);
      --color-secondary-content: oklch(88.83% 0.007 304.23);
      --color-accent: oklch(54.61% 0.215 262.88);
      --color-accent-content: oklch(88.23% 0.057 254.13);
      --color-neutral: oklch(65.75% 0.022 294.95);
      --color-neutral-content: oklch(18.51% 0.017 301.92);
      --color-info: oklch(60.89% 0.111 221.72);
      --color-info-content: oklch(91.67% 0.077 205.04);
      --color-success: oklch(67.35% 0.201 146.84);
      --color-success-content: oklch(91.38% 0.069 168.24);
      --color-warning: oklch(72.59% 0.152 69.05);
      --color-warning-content: oklch(96.07% 0.057 93.2);
      --color-error: oklch(59.54% 0.208 26.28);
      --color-error-content: oklch(93.4% 0.039 54.86);
      --radius-selector: 0.25rem;
      --radius-field: 0.375rem;
      --radius-box: 0.5rem;
      --size-selector: 0.25rem;
      --size-field: 0.25rem;
      --border: 1px;
      --depth: 0;
      --noise: 0;
    }
  }
}
@layer base {
  :root:has(input.theme-controller[value=light]:checked),[data-theme=light] {
    color-scheme: light;
    --color-base-100: oklch(100% 0 0);
    --color-base-200: oklch(97.8% 0.005 297.73);
    --color-base-300: oklch(37.01% 0.0069 297.49);
    --color-base-content: oklch(37.57% 0.022 281.8);
    --color-primary: oklch(57.59% 0.247 287.24);
    --color-primary-content: oklch(96.57% 0.017 289.61);
    --color-secondary: oklch(55.79% 0.022 301.91);
    --color-secondary-content: oklch(97.64% 0.001 286.38);
    --color-accent: oklch(62.31% 0.188 259.81);
    --color-accent-content: oklch(97.05% 0.014 254.6);
    --color-neutral: oklch(37.57% 0.0222 281.8);
    --color-neutral-content: oklch(0.98 0.0013 286.38);
    --color-info: oklch(71.48% 0.126 215.22);
    --color-info-content: oklch(98.41% 0.019 200.87);
    --color-success: oklch(73.11% 0.217 147.04);
    --color-success-content: oklch(98.1% 0.014 174.18);
    --color-warning: oklch(79.87% 0.164 73.09);
    --color-warning-content: oklch(99.34% 0.011 95.16);
    --color-error: oklch(65.39% 0.222 25.86);
    --color-error-content: oklch(98.76% 0.009 67.73);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=dark]:checked),[data-theme=dark] {
    color-scheme: dark;
    --color-base-100: oklch(31.23% 0.026 301.24);
    --color-base-200: oklch(25.39% 0.025 298.72);
    --color-base-300: oklch(23.44% 0.0194 298.63);
    --color-base-content: oklch(84.98% 0.014 295.28);
    --color-primary: oklch(53.93% 0.271 286.75);
    --color-primary-content: oklch(88.22% 0.062 290.17);
    --color-secondary: oklch(49.12% 0.021 303.05);
    --color-secondary-content: oklch(88.83% 0.007 304.23);
    --color-accent: oklch(54.61% 0.215 262.88);
    --color-accent-content: oklch(88.23% 0.057 254.13);
    --color-neutral: oklch(65.75% 0.022 294.95);
    --color-neutral-content: oklch(18.51% 0.017 301.92);
    --color-info: oklch(60.89% 0.111 221.72);
    --color-info-content: oklch(91.67% 0.077 205.04);
    --color-success: oklch(67.35% 0.201 146.84);
    --color-success-content: oklch(91.38% 0.069 168.24);
    --color-warning: oklch(72.59% 0.152 69.05);
    --color-warning-content: oklch(96.07% 0.057 93.2);
    --color-error: oklch(59.54% 0.208 26.28);
    --color-error-content: oklch(93.4% 0.039 54.86);
    --radius-selector: 0.25rem;
    --radius-field: 0.375rem;
    --radius-box: 0.5rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 0;
    --noise: 0;
  }
}
@layer base {
  :root:has(input.theme-controller[value=soft]:checked),[data-theme=soft] {
    color-scheme: light;
    --color-base-100: oklch(98.8% 0.0069 304.24);
    --color-base-200: oklch(96.95% 0.0114 308.33);
    --color-base-300: oklch(40.47% 0.0142 308.07);
    --color-base-content: oklch(32.61% 0.0705 305.29);
    --color-primary: oklch(62.68% 0.2325 303.9);
    --color-primary-content: oklch(97.68% 0.0142 308.3);
    --color-secondary: oklch(55.79% 0.0221 301.91);
    --color-secondary-content: oklch(97.64% 0.0013 286.38);
    --color-accent: oklch(62.31% 0.188 259.81);
    --color-accent-content: oklch(97.05% 0.0142 254.6);
    --color-neutral: oklch(32.61% 0.0705 305.29);
    --color-neutral-content: oklch(99.54% 0.0028 308.43);
    --color-info: oklch(71.48% 0.1257 215.22);
    --color-info-content: oklch(98.41% 0.0189 200.87);
    --color-success: oklch(69.59% 0.1491 162.48);
    --color-success-content: oklch(97.93% 0.0207 166.11);
    --color-warning: oklch(70.49% 0.1867 47.6);
    --color-warning-content: oklch(97.96% 0.0158 73.68);
    --color-error: oklch(65.39% 0.2221 25.86);
    --color-error-content: oklch(98.76% 0.0085 67.73);
    --radius-selector: 0.5rem;
    --radius-field: 0.75rem;
    --radius-box: 1rem;
    --size-selector: 0.25rem;
    --size-field: 0.25rem;
    --border: 1px;
    --depth: 1;
    --noise: 0;
  }
}
@layer base {
  @property --radialprogress {
    syntax: "<percentage>";
    inherits: true;
    initial-value: 0%;
  }
}
@layer base {
  :root {
    scrollbar-color: currentColor #0000;
    @supports (color: color-mix(in lab, red, red)) {
      scrollbar-color: color-mix(in oklch, currentColor 20%, #0000) #0000;
    }
  }
}
@layer base {
  :root, [data-theme] {
    background-color: var(--root-bg, var(--color-base-100));
    color: var(--color-base-content);
  }
}
@layer base {
  :root {
    --fx-noise: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='a'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.34' numOctaves='4' stitchTiles='stitch'%3E%3C/feTurbulence%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23a)' opacity='0.2'%3E%3C/rect%3E%3C/svg%3E");
  }
  .chat {
    --mask-chat: url("data:image/svg+xml,%3csvg width='13' height='13' xmlns='http://www.w3.org/2000/svg'%3e%3cpath fill='black' d='M0 11.5004C0 13.0004 2 13.0004 2 13.0004H12H13V0.00036329L12.5 0C12.5 0 11.977 2.09572 11.8581 2.50033C11.6075 3.35237 10.9149 4.22374 9 5.50036C6 7.50036 0 10.0004 0 11.5004Z'/%3e%3c/svg%3e");
  }
  .tooltip {
    --mask-tooltip: url("data:image/svg+xml,%3Csvg width='10' height='4' viewBox='0 0 8 4' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M0.500009 1C3.5 1 3.00001 4 5.00001 4C7 4 6.5 1 9.5 1C10 1 10 0.499897 10 0H0C-1.99338e-08 0.5 0 1 0.500009 1Z' fill='black'/%3E%3C/svg%3E%0A");
  }
}
@keyframes skeleton {
  0% {
    background-position: 150%;
  }
  100% {
    background-position: -50%;
  }
}
@keyframes indeterminate-progress {
  0% {
    background-position-x: -75%;
  }
  50% {
    background-position-x: 125%;
  }
  100% {
    background-position-x: -75%;
  }
}
@keyframes progress-bar-stripes {
  0% {
    background-position-x: 0.75rem;
  }
}
@keyframes radio {
  0% {
    padding: 5px;
  }
  50% {
    padding: 3px;
  }
}
@keyframes radio-inset {
  0% {
    padding: 1px;
  }
  50% {
    padding: 4px;
  }
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-rotate-x {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-y {
  syntax: "*";
  inherits: false;
}
@property --tw-rotate-z {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-x {
  syntax: "*";
  inherits: false;
}
@property --tw-skew-y {
  syntax: "*";
  inherits: false;
}
@property --tw-space-y-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-space-x-reverse {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-leading {
  syntax: "*";
  inherits: false;
}
@property --tw-font-weight {
  syntax: "*";
  inherits: false;
}
@property --tw-tracking {
  syntax: "*";
  inherits: false;
}
@property --tw-ordinal {
  syntax: "*";
  inherits: false;
}
@property --tw-slashed-zero {
  syntax: "*";
  inherits: false;
}
@property --tw-numeric-figure {
  syntax: "*";
  inherits: false;
}
@property --tw-numeric-spacing {
  syntax: "*";
  inherits: false;
}
@property --tw-numeric-fraction {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-inset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-inset-ring-color {
  syntax: "*";
  inherits: false;
}
@property --tw-inset-ring-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-ring-inset {
  syntax: "*";
  inherits: false;
}
@property --tw-ring-offset-width {
  syntax: "<length>";
  inherits: false;
  initial-value: 0px;
}
@property --tw-ring-offset-color {
  syntax: "*";
  inherits: false;
  initial-value: #fff;
}
@property --tw-ring-offset-shadow {
  syntax: "*";
  inherits: false;
  initial-value: 0 0 #0000;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-blur {
  syntax: "*";
  inherits: false;
}
@property --tw-brightness {
  syntax: "*";
  inherits: false;
}
@property --tw-contrast {
  syntax: "*";
  inherits: false;
}
@property --tw-grayscale {
  syntax: "*";
  inherits: false;
}
@property --tw-hue-rotate {
  syntax: "*";
  inherits: false;
}
@property --tw-invert {
  syntax: "*";
  inherits: false;
}
@property --tw-opacity {
  syntax: "*";
  inherits: false;
}
@property --tw-saturate {
  syntax: "*";
  inherits: false;
}
@property --tw-sepia {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-color {
  syntax: "*";
  inherits: false;
}
@property --tw-drop-shadow-alpha {
  syntax: "<percentage>";
  inherits: false;
  initial-value: 100%;
}
@property --tw-drop-shadow-size {
  syntax: "*";
  inherits: false;
}
@property --tw-duration {
  syntax: "*";
  inherits: false;
}
@property --tw-ease {
  syntax: "*";
  inherits: false;
}
@layer properties {
  @supports ((-webkit-hyphens: none) and (not (margin-trim: inline))) or ((-moz-orient: inline) and (not (color:rgb(from red r g b)))) {
    *, ::before, ::after, ::backdrop {
      --tw-translate-x: 0;
      --tw-translate-y: 0;
      --tw-translate-z: 0;
      --tw-rotate-x: initial;
      --tw-rotate-y: initial;
      --tw-rotate-z: initial;
      --tw-skew-x: initial;
      --tw-skew-y: initial;
      --tw-space-y-reverse: 0;
      --tw-space-x-reverse: 0;
      --tw-border-style: solid;
      --tw-leading: initial;
      --tw-font-weight: initial;
      --tw-tracking: initial;
      --tw-ordinal: initial;
      --tw-slashed-zero: initial;
      --tw-numeric-figure: initial;
      --tw-numeric-spacing: initial;
      --tw-numeric-fraction: initial;
      --tw-shadow: 0 0 #0000;
      --tw-shadow-color: initial;
      --tw-shadow-alpha: 100%;
      --tw-inset-shadow: 0 0 #0000;
      --tw-inset-shadow-color: initial;
      --tw-inset-shadow-alpha: 100%;
      --tw-ring-color: initial;
      --tw-ring-shadow: 0 0 #0000;
      --tw-inset-ring-color: initial;
      --tw-inset-ring-shadow: 0 0 #0000;
      --tw-ring-inset: initial;
      --tw-ring-offset-width: 0px;
      --tw-ring-offset-color: #fff;
      --tw-ring-offset-shadow: 0 0 #0000;
      --tw-outline-style: solid;
      --tw-blur: initial;
      --tw-brightness: initial;
      --tw-contrast: initial;
      --tw-grayscale: initial;
      --tw-hue-rotate: initial;
      --tw-invert: initial;
      --tw-opacity: initial;
      --tw-saturate: initial;
      --tw-sepia: initial;
      --tw-drop-shadow: initial;
      --tw-drop-shadow-color: initial;
      --tw-drop-shadow-alpha: 100%;
      --tw-drop-shadow-size: initial;
      --tw-duration: initial;
      --tw-ease: initial;
    }
  }
}
